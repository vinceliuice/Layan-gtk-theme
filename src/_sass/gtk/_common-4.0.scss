
* {
  padding: 0;
  background-clip: padding-box;
  -gtk-secondary-caret-color: $primary_color;
}

/***************
 * Base States *
 ***************/
.background {
  // without this headerbar transparency doesn't seem to work
  background-color: $bg_color;
  color: $fg_color;

  &.csd { // Set csd windows bottom border radius
    border-radius: $windows_radius;
    background-color: rgba($bg_color, 1);
  }

  &.maximized, &.tiled, &.fullscreen, &.solid-csd { // No radius when windows maximized
    border-radius: 0;
  }
}

dnd {
  color: $fg_color;
}

.normal-icons {
  -gtk-icon-size: 16px;
}

.large-icons {
  -gtk-icon-size: 32px;
}

spinner:disabled,
arrow:disabled,
scrollbar:disabled,
check:disabled,
radio:disabled,
treeview.expander:disabled { -gtk-icon-filter: opacity(0.5); }

%view, .view {
  background-color: $base_color;
  color: $fg_color;

  &:disabled { color: $disabled_fg_color; }

  selection,
  &:selected { @extend %selected_items; }
}

textview {
  // FIXME: we need to override background-color to ensure text rendering
  > text { background-color: $base_color; }

  > border {
    background-color: $alt_base_color;
    color: $hint_fg_color; // FIXME: not working
  }

  &:drop(active) {
    caret-color: $warning_bg_color;
  }
}

iconview {
  @extend %view;
  border-radius: $material_radius;

  > dndtarget:drop(active) {
    border: none;
  }
}

rubberband {
  border: 1px solid $alt_primary_color;
  background-color: rgba($alt_primary_color, $lower_opacity);
}

flowbox {
  > rubberband { @extend rubberband; }
  > flowboxchild {
    padding: 4px;
    border-radius: $buttons_radius;

    &:selected { @extend %selected_items; }
  }
}

gridview {
  > rubberband { @extend rubberband; }

  > child {
    padding: 3px;

    &:selected {
      @extend %selected_items;
    }

    box { //cells
      border-spacing: 8px; //label separation
      margin: 12px;
    }
  }
}

coverflow cover {
  color: $fg_color;
  background-color: $base_color;
  border: none;
}

label {
  &.separator {
    @extend .dim-label;

    color: $fg_color;
  }

  > selection {
    background-color: $primary_color;
    color: $inverse_fg_color;
  }
}

.dim-label { opacity: $hint_opacity; }

window.assistant {
  .sidebar {
    padding: 4px 0;
  }

  &.csd .sidebar { border-top-style: none; }

  .sidebar label {
    min-height: $medium_size;
    padding: 0 12px;
    color: $hint_fg_color;
    font-weight: 500;

    &.highlight { color: $fg_color; }
  }
}

window.aboutdialog image.large-icons {
  -gtk-icon-size: 128px;
}

%osd, .osd {
  color: $panel_fg_color;
  border: none;
  background-color: $panel_bg_color;
  background-clip: padding-box;
  border-radius: $menu_radius;
  padding: 6px;
  margin: 6px;
  box-shadow: $shadow_4;
}


/*********************
 * Spinner Animation *
 *********************/
@keyframes spin {
  to { transform: rotate(1turn); }
}

spinner {
  background: none;
  opacity: 0; // non spinning spinner makes no sense
  -gtk-icon-source: -gtk-icontheme('process-working-symbolic');

  &:checked {
    opacity: 1;
    animation: spin 1s linear infinite;

    &:disabled { opacity: $disabled_opacity; }
  }
}


//
// General Typography
//

.large-title {
   font-weight: 300;
   font-size: 24pt;
}
.title-1 {
   font-weight: 800;
   font-size: 20pt;
}
.title-2 {
   font-weight: 800;
   font-size: 15pt;
}
.title-3 {
   font-weight: 700;
   font-size: 15pt;
}
.title-4 {
   font-weight: 700;
   font-size: 13pt;
}
.heading {
   font-weight: 700;
   font-size: 11pt;
}
.body {
   font-weight: 400;
   font-size: 11pt;
}
.caption-heading {
   font-weight: 700;
   font-size: 9pt;
}
.caption {
   font-weight: 400;
   font-size: 9pt;
}

/****************
 * Text Entries *
 ****************/
%entry, entry {
  min-height: $medium_size;
  padding: 0 8px;
  border-radius: $buttons_radius;

  @include entry(normal);

  &:focus-within { @include entry(focus); }

  &:disabled { @include entry(disabled); }

  @at-root %flat_entry, &.flat {
    border-radius: 0;

    @include entry(flat-normal);

    &:focus-within { @include entry(flat-focus); }

    &:disabled { @include entry(flat-disabled); }
  }

  image { // icons inside the entry
    color: $secondary_fg_color;

    &:hover, &:active { color: $fg_color; }

    &:disabled { color: $hint_fg_color; }

    &.left {
      margin-left: ($medium_size - 16px) / 2 - 8px;
      margin-right: 6px;
    }

    &.right {
      margin-left: 6px;
      margin-right: ($medium_size - 16px) / 2 - 8px;
    }
  }

  &:focus-within {
    > placeholder { opacity: 0; }
  }

  > text > placeholder {
    @extend .dim-label;
  }

  > text > block-cursor {
    color: $base_color;
    background-color: $fg_color;
  }

  undershoot {
    &.left { @include undershoot(left); }

    &.right { @include undershoot(right); }
  }

  > text > selection { @extend %selected_items; }

  &.password image.caps-lock-indicator {
    color: $disabled_secondary_fg_color;
  }

  // entry error and warning style
  @each $e_type, $e_color in (error, $error_color),
                             (warning, $warning_color) {
    &.#{$e_type} {
      @include entry(normal, $e_color);

      &:focus-within { @include entry(focus, $e_color); }

      &:disabled { @include entry(disabled, $e_color); }

      &.flat {
        @include entry(flat-normal, $e_color);

        &:focus-within { @include entry(flat-focus, $e_color); }

        &:disabled { @include entry(flat-disabled, $e_color); }
      }

      image {
        color: $inverse_secondary_fg_color;

        &:hover, &:active { color: $inverse_fg_color; }

        &:disabled { color: $inverse_hint_fg_color; }
      }
    }
  }

  // &:drop(active) {
    // box-shadow: inset 0 0 0 2px $accent_color;
  // }

  // .osd & { }

  > progress {
    margin: 2px (2px - 8px);
  }

  progress > trough > progress {
    background-color: transparent;
    background-image: none;
    border-radius: 0;
    border-bottom: 2px solid $primary_color;
    box-shadow: none;
  }

   // linked entries
  .linked:not(.vertical) > & { @extend %linked; }

  // Vertically linked entries
  .linked.vertical > & { @extend %linked_vertical; }

  .linked:not(.vertical) > &.flat,
  .linked.vertical > &.flat { border-radius: 0; }
}

%treeview_entry,
treeview entry {
  &.flat, & {
    min-height: 0;
    padding: 2px;
    border-radius: 0;
    background-color: $base_color;

    &, &:focus-within {
      border-image: none;
      box-shadow: none;
    }
  }
}

// Editable Labels
editablelabel > stack > text {
  @include entry(normal);
}

.entry-tag {
  margin: 2px;
  border-radius: $circular_radius;
  box-shadow: none;
  background-color: $primary_color;
  color: $inverse_fg_color;

  &:hover { box-shadow: $shadow_1; }

  // side margins: compensate the entry padding with a negative margin
  // then the negative margin itself
  :dir(ltr) & {
    margin-left: 4px;
    margin-right: 0;
    padding-left: 12px;
    padding-right: 8px;
  }

  :dir(rtl) & {
    margin-left: 0;
    margin-right: 4px;
    padding-left: 8px;
    padding-right: 12px;
  }

  // seems any sizing doesn't work
  &.button {
    box-shadow: none;
    background-color: transparent;

    &:not(:hover):not(:active) { color: $inverse_secondary_fg_color; }
  }
}


/***********
 * Buttons *
 ***********/
// stuff for .needs-attention
$_dot_color: if($variant=='light', $primary_color, lighten($primary_color, 15%));
@keyframes needs_attention {
  from { background-image: radial-gradient(farthest-side, $_dot_color 0%, transparentize($_dot_color, 1) 0%); }
  to { background-image: radial-gradient(farthest-side, $_dot_color 95%, transparentize($_dot_color, 1)); }
}

%button,
button {
  @at-root %button_basic, & {
    min-height: 24px;
    min-width: 16px;
    padding: ($medium_size - 24px) / 2 ($medium_size - 16px) / 2;
    border-radius: $buttons_radius;
    font-weight: 500;

    @at-root %button_basic_raised, & {
      @include button(normal);

      &:hover { @include button(hover); }

      &.keyboard-activating,
      &:active { @include button(active); }
  
      &:disabled { @include button(disabled); }
  
      &:checked { @include button(checked); }
  
      &:checked:disabled { @include button(checked-disabled); }
    }

    @at-root %flat_button, &.flat {
      @at-root %simple_flat_button, & {
        @include button(flat-normal);

        &:hover { @include button(flat-hover); }

        &:active { @include button(flat-active); }

        &:disabled { @include button(flat-disabled); }
      }

      &:checked { @include button(flat-checked); }

      &:checked:disabled { @include button(flat-checked-disabled); }
    }

    &:disabled {
      filter: none;

      label {
        filter: none;
      }
    }

    &.text-button {
      padding-left: 16px;
      padding-right: 16px;
    }

    &.image-button {
      min-width: 24px;
      padding: ($medium_size - 24px) / 2;
    }

    &.text-button.image-button,
    &.image-text-button {
      label {
        &:first-child { margin-left: 16px - ($medium_size - 24px) / 2; }

        &:last-child { margin-right: 16px - ($medium_size - 24px) / 2; }
      }

      image:not(:only-child) { margin: 0 (24px - 16px) / 2; }
    }

    &.arrow-button {
      padding-left: $container_padding * 1.5;
      padding-right: $container_padding * 1.5;

      > box { border-spacing: 4px; }

      &.text-button {
        > box { border-spacing: 4px; }
      }
    }

    .linked > & { @extend %linked; }

    .linked.vertical > & { @extend %linked_vertical; }

    .linked > &.flat,
    .linked.vertical > &.flat {
      border-radius: $buttons_radius;

      &.image-button,
      &.text-button.image-button {
        border-radius: $buttons_radius;
      }
    }
  }

  @at-root %button_selected, row:selected & {
    &:disabled {
      background-color: $inverse_divider_color;
      color: $inverse_disabled_secondary_fg_color;
    }

    @at-root %button_selected_flat, &.flat {
      color: $inverse_secondary_fg_color;

      &:hover, &:active { color: $inverse_fg_color; }

      &:disabled { color: $inverse_disabled_secondary_fg_color; }

      &:checked {
        background-color: $inverse_track_color;
        color: $inverse_fg_color;
      }

      &:checked:disabled {
        background-color: $inverse_divider_color;
        color: $inverse_disabled_fg_color;
      }
    }
  }

  // big standalone buttons like in Documents pager
  &.osd {
    padding: ($large_size - 24px) / 2 ($large_size - 16px) / 2;
    box-shadow: none;
    background-color: rgba(black, 0.65);
    color: white;

    &:hover {
      background-color: rgba(black, 0.75);
      color: white;
    }

    &:active {
      background-color: rgba(black, 0.85);
      color: white;
    }

    &.image-button { padding: ($large_size - 24px) / 2; }

    &:disabled { opacity: 0; }
  }

  // Suggested and Destructive Action buttons
  @each $b_type, $b_color, $b_image in (suggested-action, $suggested_color, $suggested_image),
                                       (destructive-action, $destructive_color, $destructive_image) {
    &.#{$b_type} {
      background-color: $b_color;
      color: $inverse_fg_color;
      background-image: $b_image;
      background-size: auto auto;
      background-position: center center;
      background-repeat: no-repeat;

      &:disabled {
        @include button(disabled, $b_color);
        background-image: none;
      }

      &:checked {
        background-color: mix($inverse_fg_color, $b_color, percentage($lower_opacity));
      }

      &.flat {
        background-color: transparent;
        color: $b_color;
        background-image: none;

        &:disabled {
          @include button(flat-disabled, $b_color);
          background-image: none;
        }

        &:checked {
          background-image: none;
          background-color: rgba($b_color, 0.3);
        }
      }

      // .osd & { }
    }
  }

  @at-root %opaque_button, &.opaque {
    box-shadow: none;

    &:hover {
      background-image: image(gtkalpha(currentColor, 0.1));
      box-shadow: none;
    }

    &.keyboard-activating,
    &:active {
      background-image: image(gtkalpha(currentColor, 0.2));
      box-shadow: none;
    }

    &:checked {
      background-image: image(gtkalpha(currentColor, 0.15));
      box-shadow: none;

      &:hover {
        background-image: image(gtkalpha(currentColor, 0.2));
      }

      &.keyboard-activating,
      &:active {
        background-image: image(gtkalpha(currentColor, 0.3));
      }
    }
  }

  stackswitcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a label needs just lateral padding while an icon needs vertical
    // padding added too.

    outline-offset: -4px; // needs to be set or it gets overriden by GtkRadioButton outline-offset

    > label {
      padding-left: 6px;  // label padding
      padding-right: 6px; //
    }

    > image {
      padding-left: 6px;   // image padding
      padding-right: 6px;  //
      padding-top: 3px;    //
      padding-bottom: 3px; //
    }

    &.text-button {
      // compensate text-button paddings
      padding-left: 16px - 6px;
      padding-right: 16px - 6px;
    }

    &.image-button {
      // we want image buttons to have a 1:1 aspect ratio, so compensation
      // of the padding added to the GtkImage is needed
      padding-left: ($medium_size - 16px) / 2 - 6px;
      padding-right: ($medium_size - 16px) / 2 - 6px;
    }

    &.needs-attention {
      > label,
      > image { @extend %needs_attention; }

      &:checked {
        > label,
        > image {
          animation: none;
          background-image: none;
        }
      }
    }
  }

  // hide separators
  &.font,
  &.file { separator { @extend %hide_separators; }}

  .primary-toolbar & { -gtk-icon-shadow: none; } // tango icons don't need shadows

  @at-root %circular_button,
  &.close,
  &.circular,
  &.round-button { // The Bloody Circul Button
    border-radius: $circular_radius;
  }

  @at-root %small_button {
    min-height: $small_size;
    min-width: $small_size;
    padding: 0;
    border-radius: $circular_radius;
  }

  @at-root %pill_button,
  &.pill {
    padding: $container_padding * 1.5 $small_size;
    border-radius: $circular_radius;
  }

  &.card {
    background-color: $fill_color;
    background-clip: padding-box;
    font-weight: inherit;
    padding: 0;

    &:hover {
      background-image: image($divider_color);
    }

    &.keyboard-activating,
    &:active {
      background-image: image($track_color);
    }

    &:checked {
      background-color: $button_bg_color;
      background-image: image($semi_fill_color);

      &:hover { background-image: image($divider_color); }

      &.keyboard-activating,
      &:active { background-image: image($track_color); }

      &.has-open-popup { background-image: image($disabled_secondary_fg_color); }

      .osd & {
        background-color: gtkalpha(currentColor, 0.1);
      }
    }
  }
}

menubutton {
  &.osd {
    background: none;
    color: inherit;
  }

  &.circular > button { @extend %circular_button; }
  &.flat > button { @extend %flat_button; }
  &.pill > button { @extend %pill_button; }

  &.suggested-action,
  &.opaque {
    border-radius: $buttons_radius;

    &.circular, &.pill {
      border-radius: $circular_radius;
    }

    > button {
      @extend %opaque_button;

      &, &:checked {
        background-color: transparent;
        color: inherit;
      }
    }
  }

  &.image-button > button {
    min-width: 24px;
    padding-left: $container_padding;
    padding-right: $container_padding;
  }

  &.card > button {
    border-radius: $buttons_radius;
  }

  arrow {
    min-height: 16px;
    min-width: 16px;
    &.none {
      -gtk-icon-source: -gtk-icontheme('open-menu-symbolic');
    }
    &.down {
      -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    }
    &.up {
      -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
    }
    &.left {
      -gtk-icon-source: -gtk-icontheme('pan-start-symbolic');
    }
    &.right {
      -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
    }
  }
}

splitbutton {
  border-radius: $buttons_radius;

  &, & > separator {
    transition: $shorter_duration;
    transition-property: background;
  }

  > separator {
    margin-top: $container_padding;
    margin-bottom: $container_padding;
    background: none;
  }

  > menubutton > button {
    min-width: 24px;
    padding-left: $container_padding;
    padding-right: $container_padding;
  }

  // Since the inner button doesn't have any style classes on it,
  // we have to add them manually
  &.image-button > button {
    min-width: 24px;
    padding-left: $container_padding;
    padding-right: $container_padding;
  }

  &.text-button.image-button > button,
  &.image-text-button > button {
    padding-left: $container_padding * 1.5;
    padding-right: $container_padding * 1.5;

    > box {
      border-spacing: $container_padding;
    }
  }

  &:disabled {
    filter: none;

    > button, > menubutton > button {
      filter: none;
    }
  }

  // Reimplementing linked so we don't blow up css
  > button:dir(ltr),
  > menubutton > button:dir(rtl) {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
    margin-right: -1px;
  }

  > button:dir(rtl),
  > menubutton > button:dir(ltr) {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
    margin-left: -1px;
  }

  @at-root %flat_split_button,
  &.flat {
    > separator {
      background: $border_color;
    }

    &:hover,
    &:active,
    &:checked {
      background: $divider_color;

      > separator {
        background: none;
      }
    }

    &:disabled {
      filter: none;

      > button:disabled, > menubutton > button:disabled {
        filter: none;
      }
    }

    &:focus-within:focus-visible > separator {
      background: none;
    }

    > button,
    > menubutton > button {
      @extend %flat_button;

      border-radius: $buttons_radius;
    }
  }

  &.suggested-action,
  &.opaque {
    > button, > menubutton > button {
      @extend %opaque_button;

      &, &:checked {
        color: inherit;
        background-color: transparent;
      }
    }

    > menubutton > button {
      &:dir(ltr) { box-shadow: inset 1px 0 $border_color; }
      &:dir(rtl) { box-shadow: inset -1px 0 $border_color; }
    }
  }

  > menubutton > button > arrow.none {
    -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
  }
}

buttoncontent {
  > box {
    border-spacing: $container_padding;

    > label {
      font-weight: bold;

      &:dir(ltr) { padding-right: 2px; }
      &:dir(rtl) { padding-left: 2px; }
    }
  }

  .arrow-button > box > &,
  splitbutton > button > & {
    > box > label {
      &:dir(ltr) { padding-right: 0; }
      &:dir(rtl) { padding-left: 0; }
    }
  }
}

tabbutton {
  label {
    font-weight: 800;
    // We're intentionally using pixels here, as this label is a part of the icon
    font-size: 10.5px;

    &.small {
      font-size: 8px;
    }
  }

  indicatorbin > indicator,
  indicatorbin > mask {
    &:dir(ltr) { transform: translate(-1px, 1px); }
    &:dir(rtl) { transform: translate(1px, 1px); }
  }
}

%needs_attention {
  animation: needs_attention $longer_duration $deceleration_curve forwards;
  background-repeat: no-repeat;
  background-position: right 3px;
  background-size: 6px 6px;

  &:dir(rtl) { background-position: left 3px; }
}

%linked_middle {
  border-radius: 0;
}

%linked {
  @extend %linked_middle;

  &:first-child {
    border-top-left-radius: $buttons_radius;
    border-bottom-left-radius: $buttons_radius;
  }

  &:last-child {
    border-top-right-radius: $buttons_radius;
    border-bottom-right-radius: $buttons_radius;
  }

  &:only-child {
    border-radius: $buttons_radius;
  }
}

%linked_vertical_middle {
  border-radius: 0;
}

%linked_vertical {
  @extend %linked_vertical_middle;

  &:first-child {
    border-top-left-radius: $buttons_radius;
    border-top-right-radius: $buttons_radius;
  }

  &:last-child {
    border-bottom-left-radius: $buttons_radius;
    border-bottom-right-radius: $buttons_radius;
  }

  &:only-child {
    border-radius: $buttons_radius;
  }
}

// .linked >                  element            child
$deprecated_linked_widgets: ("combobox",         "> box > button.combo"),
                            ("appchooserbutton", "> combobox > box > button.combo");

// .linked >        element       child
$_linked_widgets: ("%button",     ""),
                  ("button",      ""),
                  ("menubutton",  "> button"),
                  ("dropdown",    "> button"),
                  ("colorbutton", "> button"),
                  ("fontbutton",  "> button"),
                  ("tabbutton",   "> button"),
                  ("%entry",      ""),
                  ("entry",       "");

$_linked_widgets: join($_linked_widgets, $deprecated_linked_widgets);

@each $widget, $child in $_linked_widgets {
  .linked:not(.vertical) > {
    #{$widget} {
      &:dir(ltr):not(:first-child) #{$child},
      &:dir(rtl):not(:last-child) #{$child} {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
        margin-left: 0;
      }

      &:dir(ltr):not(:last-child) #{$child},
      &:dir(rtl):not(:first-child) #{$child} {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
      }
    }
  }

  .linked.vertical {
    #{$widget} {
      &:not(:first-child) #{$child} {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
        margin-top: 0;
      }

      &:not(:last-child) #{$child} {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
      }
    }
  }
}

button.color {
  min-height: $small_size;
  min-width: $small_size;
  padding: $container_padding;

  > colorswatch:only-child {
    &, > overlay { border-radius: 0; }
  }
}

/*********
 * Links *
 *********/
%links,
link {
  &, &:hover, &:active { color: $link_color; }

  &:visited {
    &, &:hover, &:active { color: $visited_link_color; }
  }

  @at-root %link_selected,
  &:selected,
  *:selected & { color: $inverse_secondary_fg_color; }
}

.link selection {
  color: $fg_color;
  background-color: $semi_fill_color;
}

button.link {
  @extend %links;

  > label { text-decoration-line: underline; }
}

%spinbutton_entry {
  min-width: $large_size - 8px * 2;
  // reset all the other props since the spinbutton node is styled here
  margin: 0;
  padding-left: 12px;
  border-image: none;
  border-radius: 0;
  box-shadow: none;
  background-color: transparent;
}

/*****************
 * GtkSpinButton *
 *****************/
spinbutton {
  > text {
    > selection { @extend %selected_items; }
    > block-cursor {
      background-color: $fg_color;
      color: $base-color;
    }
  }

  &:not(.vertical) {
    // in this horizontal configuration, the whole spinbutton
    // behaves as the entry, so we extend the entry styling
    // and nuke the style on the internal entry
    @extend %entry;
    padding: 0;

    > text { @extend %spinbutton_entry; }

    > button {
      // margin: $container_padding;
      border: solid 6px transparent;
      @extend %simple_flat_button;
      @extend %small_button;

      &.up:dir(ltr),
      &.down:dir(rtl) { margin-left: -3px; }

      &.up:dir(rtl),
      &.down:dir(ltr) { margin-right: -3px; }
    }
  }

  // Vertical
  &.vertical {
    // in the vertical configuration, we treat the spinbutton
    // as a box, and tweak the style of the entry in the middle
    // so that it's linked
    background-color: $fill_color;
    border-radius: $buttons_radius;

    &:disabled { color: $disabled_fg_color; }

    &:drop(active) {
      box-shadow: none;
    }

    > text {
      min-height: $medium_size;
      min-width: $large_size;
      padding: 0;
    }

    > button {
      min-height: $medium_size;
      min-width: $large_size;
      padding: 0;

      @extend %simple_flat_button;

      &.up { border-radius: $buttons_radius $buttons_radius 0 0; }

      &.down { border-radius: 0 0 $buttons_radius $buttons_radius; }
    }
  }

  // Misc
  treeview &:not(.vertical) {
    min-height: 0;
    border-style: none;
    border-radius: 0;

    text {
      min-height: 0;
      padding: 1px 2px;
    }
  }

  row.spin & {
    min-height: 0;
    padding: 0;

    &, &:focus-within {
      background: none;
      box-shadow: none;
    }

    > text {
      padding: 0;

      &, &:focus-within {
        background: none;
      }
    }
  }

  font-feature-settings: "tnum";
}


/**************
 * ComboBoxes *
 **************/
dropdown > popover.menu.background > contents { padding: 0; } //allow search entries with no margin
dropdown > button > box { border-spacing: 6px; }

dropdown,
combobox {
  arrow {
    -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    min-height: 16px;
    min-width: 16px;
  }

  // align menu labels with the button label
  > popover.menu > contents modelbutton {
    padding-left: 10px;
    padding-right: 10px;
  }

  button.combo:checked { transition: none; } // workaround for menuitem selection

  button.combo cellview {
    &:dir(ltr) { margin-left: 8px - ($medium_size - 16px) / 2; }
    &:dir(rtl) { margin-right: 8px - ($medium_size - 16px) / 2; }
  }

  &.linked {
    button:nth-child(2) {
      &:dir(ltr) {
        border-top-left-radius: $buttons_radius;
        border-bottom-left-radius: $buttons_radius;
      }
      &:dir(rtl) {
        border-top-right-radius: $buttons_radius;
        border-bottom-right-radius: $buttons_radius;
      }
    }
  }

  &:drop(active) { // FIXME: untested
    box-shadow: none;
  }
}

// the combo is a composite widget so the way we do button linking doesn't
// work, special case needed. See
// https://bugzilla.gnome.org/show_bug.cgi?id=733979

.linked:not(.vertical) > combobox {
  > box > button.combo { @extend %linked_middle; }

  &:first-child > box > button.combo {
    border-top-left-radius: $buttons_radius;
    border-bottom-left-radius: $buttons_radius;
  }

  &:last-child > box > button.combo {
    border-bottom-right-radius: $buttons_radius;
    border-top-right-radius: $buttons_radius;
  }

  &:only-child > box > button.combo {
    border-radius: $buttons_radius;
  }
}

.linked.vertical > combobox {
  > box > button.combo { @extend %linked_vertical_middle; }

  &:first-child > box > button.combo {
    border-top-left-radius: $buttons_radius;
    border-top-right-radius: $buttons_radius;
  }

  &:last-child > box > button.combo {
    border-bottom-left-radius: $buttons_radius;
    border-bottom-right-radius: $buttons_radius;
  }

  &:only-child > box > button.combo {
    border-radius: $buttons_radius;
  }
}

%combo_flat {
  border-radius: 0;
  background-image: none;
  font-weight: inherit;

  @include entry(flat-normal);

  &:hover { box-shadow: inset 0 -2px $hint_fg_color; }

  &:checked {
    box-shadow: inset 0 -2px $primary_color;
  }

  &:disabled {
    box-shadow: inset 0 -1px $border_color;
    color: $disabled_fg_color;
  }
}


/************
 * Toolbars *
 ************/

%toolbar {
  button:not(.raised):not(.suggested-action):not(.destructive-action):not(.opaque) {
    &.arrow-button,
    &.image-button,
    &.image-text-button {
      @extend %flat_button;
    }
  }

  menubutton:not(.raised):not(.suggested-action):not(.destructive-action):not(.opaque) {
    &.image-button > button {
      @extend %flat_button;
    }
  }

  .linked button:not(.raised):not(.suggested-action):not(.destructive-action):not(.opaque) {
    &.arrow-button,
    &.image-button,
    &.image-text-button {
      @extend %button_basic_raised;
    }
  }

  menubutton.raised > button:not(.raised):not(.suggested-action):not(.destructive-action):not(.opaque) {
    &.arrow-button,
    &.image-button,
    &.image-text-button {
      @extend %button_basic_raised;
    }
  }

  menubutton.suggested-action,
  menubutton.opaque {
    > button:not(.raised):not(.suggested-action):not(.destructive-action):not(.opaque) {
      @extend %opaque_button;

      color: inherit;
      background-color: transparent;
    }
  }

  // switch {
  //   margin-top: 4px;
  //   margin-bottom: 4px;
  // }

  // Reset styles for popovers
  popover {
    button:not(.flat):not(.raised):not(.suggested-action):not(.destructive-action):not(.opaque) {
      &.arrow-button,
      &.image-button,
      &.image-text-button {
        @extend %button_basic_raised;
      }
    }

    menubutton:not(.flat):not(.raised):not(.suggested-action):not(.destructive-action):not(.opaque) {
      &.image-button > button {
        @extend %button_basic_raised;
      }
    }
  }
}

%toolbar-shrunk {
  padding-top: $container_padding / 2;
  padding-bottom: $container_padding / 2;
}

.toolbar {
  padding: $container_padding;
  background-color: $bg_color;
  border-spacing: $container_padding;

  & > button { @extend %flat_button; }

  // on OSD
  .osd & { background-color: transparent; }

  // stand-alone OSD toolbars
  @at-root %toolbar_osd, &.osd {
    transition: $shadow_transition;
    padding: $container_padding;
    border-radius: $buttons_radius;
    box-shadow: $shadow_2, inset 0 1px $highlight_color;
    background-color: $base_color;

    &:backdrop { box-shadow: $shadow_1, inset 0 1px $highlight_color; }

    &.left,
    &.right,
    &.top,
    &.bottom { border-radius: 0; } // positional classes for `attached` osd toolbars
  }

  // toolbar separators
  &.horizontal > separator { margin: 2px; }
  &.vertical > separator { margin: 2px; }

  &:not(.inline-toolbar):not(.osd) {
    switch { margin: 2px + $container_padding 2px; }
  }
}

%searchbar-flat > revealer > box {
  background-color: transparent;
  color: inherit;
  box-shadow: none;
  border: none;
  padding-bottom: $container_padding;
}

%searchbar-inline {
  @extend %searchbar-flat;

  > revealer > box:backdrop {
    background-color: transparent;
    transition: none;

    > * {
      filter: none;
      transition: none;
    }
  }
}

%searchbar-shrunk > revealer > box {
  padding-top: $container_padding / 2;
  padding-bottom: $container_padding / 2;
}

searchbar > revealer > box {
  border-spacing: 0;
  padding: $container_padding;
  border-style: solid;
  border-width: 0 0 1px;
  border-color: $border_color;
  background-color: $bg_color;
  background-clip: border-box;
  box-shadow: none;
  @extend %toolbar;

  &:backdrop {
    background-color: $bg_color;

    > * {
      filter: none;
    }
  }

  entry,
  button,
  menubutton,
  splitbutton { margin: 0; }

  .close {
    min-width: 18px;
    min-height: 18px;
    padding: 4px;
    border-radius: 50%;
    @extend %flat_button;

    &:dir(ltr) {
      margin-left: 10px;
      margin-right: 4px;
    }

    &:dir(rtl) {
      margin-left: 4px;
      margin-right: 10px;
    }
  }
}

searchbar.inline {
  @extend %searchbar-inline;
}

actionbar > revealer > box {
  box-shadow: none;
  padding: $container_padding;
  border-top: 1px solid $border_color;
  background-color: $base_color;
  color: $fg_color;

  // button:not(.suggested-action):not(.destructive-action):not(.server-list-button) { @extend %flat_button; }

  .linked > button { border-radius: $buttons_radius; }

  &, > box.start, > box.end {
    border-spacing: $container_padding;
  }

  &:backdrop {
    background-color: $bg_color;

    > * {
      filter: none;
    }
  }
}

%actionbar-inline > revealer > box {
  background-color: transparent;
  color: inherit;
  box-shadow: none;
  border: none;
  padding-top: $container_padding;

  &:backdrop {
    background-color: transparent;
    transition: none;

    > * {
      filter: none;
      transition: none;
    }
  }
}

%actionbar-shrunk > revealer > box {
  padding-top: $container_padding / 2;
  padding-bottom: $container_padding / 2;
}

//
// AdwBanner
//
banner > revealer > widget {
  /* There are 2 more instances in _sidebars.css, keep in sync with that */
  background-color: mix($primary_color, $bg_color, 30%);
  color: $fg_color;
  padding: $container_padding;

  &:backdrop {
    background-color: mix($primary_color, $bg_color, 15%);

    > label, > button {
      filter: opacity(.5);
    }
  }
}

//
// AdwToolbarView
//
toolbarview {
  > .top-bar,
  > .bottom-bar {
    headerbar { @extend %headerbar-inline; }
    searchbar { @extend %searchbar-inline; }
    actionbar { @extend %actionbar-inline; }
    menubar   { @extend %menubar-inline; }
    tabbar    { @extend %tabbar-inline; }

    .collapse-spacing {
      padding-top: 0;
      padding-bottom: 0;

      headerbar { @extend %headerbar-shrunk; }
      searchbar { @extend %searchbar-shrunk; }
      actionbar { @extend %actionbar-shrunk; }
      menubar   { @extend %menubar-shrunk; }
      .toolbar  { @extend %toolbar-shrunk; }
      tabbar    { @extend %tabbar-shrunk; }

      viewswitcherbar { @extend %viewswitcherbar-shrunk; }
    }

    &.raised {
      background-color: $titlebar_bg_color;
      color: $titlebar_fg_color;

      &:backdrop {
        background-color: $alt_titlebar_bg_color;
      }
    }

    &:backdrop > windowhandle {
      filter: opacity(.5);
    }
  }

  > .top-bar.raised {
    box-shadow: 0 1px $border_color,
                0 2px 6px rgba(black, 0.1);

    &.border {
      box-shadow: 0 1px $border_color;
    }
  }

  > .bottom-bar.raised {
    box-shadow: 0 -1px $border_color,
                0 -2px 6px rgba(black, 0.1);

    &.border {
      box-shadow: 0 -1px $border_color;
    }
  }

  &.undershoot-top    scrolledwindow { @include undershoot(top); }
  &.undershoot-bottom scrolledwindow { @include undershoot(bottom); }

  window.devel sheet & > .top-bar {
    background-image: unset;
    background-repeat: unset;
  }
}

/************
 * Pathbars *
 ************/
%pathbar_button,
pathbar > button {
  padding-left: ($medium_size - 24px) / 2;
  padding-right: ($medium_size - 24px) / 2;
  @extend %flat_button;
  border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                                $primary_color 0%,
                                transparent 0%)
                                0 0 0 / 0 0 0px;
  border-radius: $buttons_radius;

  &:checked {
    border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                                  $primary_color 100%,
                                  transparent 0%)
                                  0 0 2 / 0 0 2px;

    &, &:disabled { background-color: transparent; }
  }

  label, image {
    margin-left: $container_padding / 2;
    margin-right: $container_padding / 2;
  }

  &.slider-button {
    padding-left: (24px - 16px) / 2;
    padding-right: (24px - 16px) / 2;
  }
}


/**************
 * Tree Views *
 **************/
columnview.view,
treeview.view {
  border-left-color: $solid_border_color; // this is actually the tree lines color,
  border-top-color: $solid_border_color; // while this is the grid lines color, better then nothing

  &:selected { border-left-color: $inverse_track_color; }

  > rubberband { @extend rubberband; } // to avoid borders being overridden by the previously set props

  &:hover, &:active, &:selected { border-radius: 0; }

  &.separator {
    min-height: 1px + 2px * 2;
    color: $border_color;
  }

  > dndtarget:drop(active) {
    border-style: solid none;
    border-width: 1px;
    border-color: $accent_color;

    &.after { border-top-style: none; }

    &.before { border-bottom-style: none; }
  }

  &.expander {
    -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    -gtk-icon-transform: rotate(-90deg);

    &:dir(rtl) { -gtk-icon-transform: rotate(90deg); }
    &:checked { -gtk-icon-transform: unset; }

    color: $secondary_fg_color;

    &:hover, &:active { color: $fg_color; }
    &:disabled { color: $disabled_secondary_fg_color; }

    &:selected {
      color: $inverse_secondary_fg_color;

      &:hover, &:active { color: $inverse_fg_color; }
      &:disabled { color: $inverse_disabled_secondary_fg_color; }
    }
  }

  &.progressbar { // progress bar in treeviews
    border-bottom: $bar_size solid $primary_color;
    box-shadow: none;
    background-color: transparent;

    &:selected { border-bottom-color: $inverse_fg_color; }
  }

  &.trough { // progress bar trough in treeviews
    border-bottom: $bar_size solid rgba($primary_color, $lower_opacity);
    box-shadow: none;
    background-color: transparent;

    &:selected { border-bottom-color: $inverse_track_color; }
  }

  > header {
    > button {
      @extend %row_activatable;

      padding: 2px 6px;
      background-clip: border-box;
      border-style: none solid none none;
      border-color: transparent;
      border-radius: 0;
      border-image: linear-gradient(to bottom,
                                    transparent 20%,
                                    $border_color 20%,
                                    $border_color 80%,
                                    transparent 80%) 0 1 0 0 / 0 1px 0 0 stretch;

      &, &:hover, &:active { box-shadow: none; }
      &, &:disabled { background-color: transparent; }
      &:last-child { border-right-style: none; }

      sort-indicator {
        &.ascending {
          -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
        }

        &.descending {
          -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
        }

        min-height: 16px;
        min-width: 16px;
      }
    }
  }

  button.dnd,
  header.button.dnd { // for treeview-like derive widgets
    padding: 2px 6px;
    border-style: none solid solid;
    border-width: 1px;
    border-color: $border_color;
    border-radius: 0;
    box-shadow: none;
    background-color: $base_color;
    background-clip: border-box;
    color: $primary_color;
  }

  acceleditor > label { background-color: $primary_color; } // see tests/testaccel to test
}


/*********
 * Menus *
 *********/

%menubar-inline {
  box-shadow: none;
  padding-bottom: 0;
}

%menubar-shrunk {}

menubar {
  padding: 0;
  box-shadow: inset 0 -1px $border_color;
  background-color: $titlebar_bg_color;
  color: $titlebar_secondary_fg_color;

  > item {
    transition: $shorter_transition;
    min-height: 20px;
    padding: $container_padding $container_padding * 2;
    color: $titlebar_secondary_fg_color;

    &:hover { // Seems like it :hover even with keyboard focus
      transition: none;
      // background-color: $titlebar_divider_color;
      color: $titlebar_fg_color;
      box-shadow: inset 0 -3px $primary_color;
    }

    &:disabled { color: $titlebar_disabled_secondary_fg_color; }

    label:disabled { color: inherit; } // to inherit the above color
  }

  & > item popover.menu.background > contents {
    padding: $container_padding;
  }
  //nested submenus
  & > item popover.menu popover.menu {
    padding: 0 0 4px 0;
  }
  & > item popover.menu.background popover.menu.background > contents {
    margin: 0;
    border-radius: $menu_radius; //including top
  }
}

popover.menu {
  padding: 0;

  box.inline-buttons {
    padding: 0 $container_padding;

    button.image-button.model {
      min-height: 28px;
      min-width: 28px;
      padding: 0;
      border: none;
      outline: none;
      @extend %flat_button;
    }
  }

  box.circular-buttons {
    button.circular.image-button.model {
      @extend %flat_button;
      @extend %circular_button;
      padding: $container_padding;
      min-height: 28px;
      min-width: 28px;
    }
  }

  arrow.left,
  radio.left,
  check.left {
    margin-left: -2px;
    margin-right: $container_padding;
  }

  arrow.right,
  radio.right,
  check.right {
    margin-left: $container_padding;
    margin-right: -2px;
  }

  label.title {
    font-weight: bold;
    padding: 4px 32px; //this will fall apart with font sizing
  }
}

/************
 * Popovers *
 ************/

%popover_flat_button {
  color: $popover_fg;
  background-color: transparent;
  box-shadow: none;

  &:hover {
    background-color: $inverse_divider_color;
    color: $inverse_fg_color;
  }

  &:checked, &:active {
    color: $inverse_fg_color;
    background-color: $inverse_track_color;
  }

  &:disabled {
    color: $popover_disabled_fg;
    background-color: transparent;
  }
}

%popover_button {
  color: $popover_fg;
  background-color: transparent;
  box-shadow: none;

  &:hover {
    transition: none;
    color: $inverse_fg_color;
    background-color: $inverse_divider_color;
  }

  &:checked, &:active {
    background-color: $primary_color;
    color: $inverse_fg_color;
  }

  &:disabled {
    color: $popover_disabled_fg;
    background-color: transparent;
  }

  &:checked:disabled {
    color: $popover_disabled_fg;
    background-color: rgba($primary_color, 0.5);
  }

  &.flat {
    @extend %popover_flat_button;
  }
}

%popover_entry {
  border-radius: 0;
  caret-color: $inverse_fg_color;
  @include entry(flat-normal, $inverse_track_color);

  &:focus-within { @include entry(flat-focus); }

  &:disabled {
    box-shadow: inset 0 -1px $inverse_divider_color;
    background-color: transparent;
  }

  &, label, image {
    color: $popover_fg;
    &:focus-within { color: $inverse_fg_color; }
    &:disabled { color: $popover_disabled_fg; }
  }
}

popover.background {
  background-color: transparent;
  font: initial; // Decouple the font of popovers from their entry/textview

  > arrow,
  > contents {
    transition: $shadow_transition;
    padding: $container_padding;
    box-shadow: $shadow_3;
    background-color: if($solid == 'false', rgba($menu_bg_color, 0.95), $menu_bg_color);
    border-radius: $popup_radius;
    color: $menu_fg_color;
    border: none;

    &:disabled { color: $disabled_secondary_fg_color; }
  }

  &:backdrop {
    background-color: transparent;

    > arrow,
    > contents {
      box-shadow: $shadow_1;
    }
  }

  > contents {
    > list,
    > .view,
    > toolbar {
      border-style: none;
      background-color: transparent;
      box-shadow: none;
    }

    separator {
      margin: $container_padding / 2 0;
    }

    list separator { margin: 0; }

    listview.view {
      background-color: transparent;

      > row {
        margin: 0;
        border-radius: $material_radius;
        padding: $container_padding $container_padding * 2;

        &:selected {
          background-color: rgba($fg_color, 0.12);
          color: $fg_color;
        }
      }
    }
  }

  &.touch-selection,
  &.magnifier,
  &.osd { @extend %osd; }

  .linked > entry, entry,
  spinbutton:not(.vertical) {
    @extend %flat_entry;
  }

  button {
    border-radius: $material_radius;

    &.combo {
      @extend %combo_flat;
    }

    .linked > & {
      border-radius: $material_radius;

      &:first-child {
        border-radius: $material_radius;
      }

      &:last-child {
        border-radius: $material_radius;
      }

      &:only-child {
        border-radius: $material_radius;
      }
    }
  }

  modelbutton {
    min-height: 20px;
    min-width: 40px;
    padding: $container_padding / 2 $container_padding;
    border-radius: $material_radius;
    box-shadow: none;
    animation: none;
    transition: none;
    @extend %flat_button;

    arrow {
      background: none;

      &:hover { background: none; }

      &.left { -gtk-icon-source: -gtk-icontheme("go-previous-symbolic"); }

      &.right { -gtk-icon-source: -gtk-icontheme("go-next-symbolic"); }
    }

    &:hover {
      color: if($variant == 'light', $alt_primary_color, $menu_fg_color);
      background-color: if($titlebar == 'light', rgba($alt_primary_color, 0.1), rgba($menu_fg_color, 0.08));
      background-image: none;
      box-shadow: none;
    }

    &:hover:active {
      color: if($variant == 'light', $alt_primary_color, $menu_fg_color);
      background-color: if($titlebar == 'light', rgba($alt_primary_color, 0.12), rgba($menu_fg_color, 0.1));
      background-image: none;
      box-shadow: none;
    }

    &:focus:not(:hover) {
      transition: none;
      background: none;
      box-shadow: none;
      animation: none;
    }
  }

  &.menu button, button.model { border-radius: $material_radius; }

  checkbutton.text-button,
  radiobutton.text-button { outline-style: none; }

  list separator { margin: 0; }

  label.separator { color: $disabled_fg_color; }
}


/*************
 * Notebooks *
 *************/

$notebook_radius: $windows_radius - 3px;
$notebook_header_radius: $windows_radius - 4px;

notebook {
  frame > paned > & > header,
  &.frame > header { background-color: $alt_base_color; }

  &, &.frame {
    background-color: $base_color;
    border-radius: $notebook_radius;
  }

  &.frame frame {
    > border {
      border: none;
      border-radius: $notebook_radius;
    }

    > list {
      row.activatable { border-radius: $notebook_radius; }
    }
  }

  > header {
    border-width: 1px;
    border-color: $border_color;
    background-color: $bg_color;
    background-clip: border-box;

    &.top {
      border-bottom-style: solid;
      border-radius: $notebook_header_radius $notebook_header_radius 0 0;
      > tabs {
        margin-bottom: -1px;
        > tab {

          &:hover { box-shadow: inset 0 -2px $track_color; }

          &:checked { box-shadow: inset 0 -2px $primary_color; }
        }
      }
    }

    &.bottom {
      border-top-style: solid;
      border-radius: 0 0 $notebook_header_radius $notebook_header_radius;
      > tabs {
        margin-top: -1px;
        > tab {

          &:hover { box-shadow: inset 0 2px $track_color; }

          &:checked { box-shadow: inset 0 2px $primary_color; }
        }
      }
    }

    &.left {
      border-right-style: solid;
      border-radius: $notebook_header_radius 0 0 $notebook_header_radius;
      > tabs {
        margin-right: -1px;
        > tab {

          &:hover { box-shadow: inset -2px 0 $track_color; }

          &:checked { box-shadow: inset -2px 0 $primary_color; }
        }
      }
    }

    &.right {
      border-left-style: solid;
      border-radius: 0 $notebook_header_radius $notebook_header_radius 0;
      > tabs {
        margin-left: -1px;
        > tab {

          &:hover { box-shadow: inset 2px 0 $track_color; }

          &:checked { box-shadow: inset 2px 0 $primary_color; }
        }
      }
    }

    &.top > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-top-style: none;
    }

    &.bottom > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-bottom-style: none;
    }

    @at-root %notebook_vert_arrows {
      padding-left: 4px;
      padding-right: 4px;

      &.down {
        margin-left: -8px;
        -gtk-icon-source: -gtk-icontheme('pan-start-symbolic');
      }

      &.up {
        margin-right: -8px;
        -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
      }
    }

    &.left > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-left-style: none;
    }

    &.right > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-right-style: none;
    }

    @at-root %notebook_horz_arrows {
      padding-top: 4px;
      padding-bottom: 4px;

      &.down {
        margin-top: -8px;
        -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
      }

      &.up {
        margin-bottom: -8px;
        -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
      }
    }

    > tabs > arrow {
      @extend %simple_flat_button;

      min-height: 16px;
      min-width: 16px;
      border-radius: 0;
    }

    tab {
      transition: $shorter_transition;
      min-height: $small_size;
      min-width: $small_size;
      padding: $container_padding 12px;
      outline-offset: -6px;
      border-width: 1px; // for reorderable tabs
      border-color: transparent;
      color: $secondary_fg_color;
      font-weight: 500;

      &:hover {
        color: $fg_color;

        &.reorderable-page {
          border-color: $border_color;
          background-color: $alt_base_color;
        }
      }

      &:disabled { color: $disabled_secondary_fg_color; }

      &:checked {
        background-color: transparent;
        color: $fg_color;

        &:disabled { color: $disabled_fg_color; }

        &.reorderable-page {
          border-color: $border_color;
          background-color: $base_color;
        }
      }

      // colors the button like the label, overridden otherwise
      button.flat {
        @extend %small_button;
        min-height: 24px;
        min-width: 24px;
        padding: 0;
        margin: 0;

        &:last-child {
          margin-left: $container_padding;
          margin-right: $container_padding - 12px;
        }

        &:first-child {
          margin-left: $container_padding - 12px;
          margin-right: $container_padding;
        }
      }
    }

    &.top,
    &.bottom {
      tabs {
        padding-left: 8px;
        padding-right: 8px;

        &:not(:only-child) {
          &:first-child { margin-left: 0; }
          &:last-child { margin-right: 0; }
        }

        tab {
          &.reorderable-page {
            margin: 0 -1px;
            border-style: none solid;
          }
        }
      }
    }

    &.left,
    &.right {
      tabs {
        padding-top: 8px;
        padding-bottom: 8px;

        &:not(:only-child) {
          &:first-child { margin-top: 0; }
          &:last-child { margin-bottom: 0; }
        }

        tab {
          &.reorderable-page {
            margin: -1px 0;
            border-style: solid none;
          }
        }
      }
    }
  }

  > stack:not(:only-child) { // the :not(:only-child) is for "hidden" notebooks
    background-color: $base_color;
    border-radius: $notebook_radius;

    entry:not(.search),
    spinbutton:not(.vertical) { @extend %flat_entry; }

    .linked > entry:not(.vertical) { &:first-child, &:last-child, &:only-child { border-radius: 0; } }

    spinbutton:not(.vertical) entry { &, &:focus, &:disabled { @extend %spinbutton_entry; }}

    treeview entry:not(.search),
    treeview spinbutton:not(.vertical) { @extend %treeview_entry; }

    button.combo { @extend %combo_flat; }
  }
}


/**************
 * Scrollbars *
 **************/
scrollbar {
  $_slider_min_length: 24px;

  transition: $shorter_transition;
  background-color: rgba($base_color, 0.65);
  background-clip: $extra_background_clip;

  // scrollbar border
  &.top { border-bottom: 1px solid $border_color; }
  &.bottom { border-top: 1px solid $border_color; }
  &.left { border-right: 1px solid $border_color; }
  &.right { border-left: 1px solid $border_color; }

  // slider
  > range > trough {
    box-shadow: none;
    outline: none;
    background: none;
    padding: 0;
    margin: 0;

    > slider {
      transition: $shorter_transition, margin 0, border-width 0;
      min-width: 8px;
      min-height: 8px;
      border: 4px solid transparent;
      border-radius: $circular_radius;
      background-clip: padding-box;
      background-color: $hint_fg_color;
      box-shadow: none;
      outline: none;
      padding: 0;
      margin: 0;
  
      &:hover { background-color: $secondary_fg_color; }
  
      &:active { background-color: $fg_color; }
  
      &:disabled { background-color: $disabled_secondary_fg_color; }
    }
  }

  > range.fine-tune {
    > trough > slider {
      transition: $shorter_transition, margin 0, border-width 0, min-width 0, min-height 0;
      min-width: 4px;
      min-height: 4px;
    }

    &.horizontal > trough > slider { margin: 2px 0; }

    &.vertical > trough > slider { margin: 0 2px; }
  }

  &.overlay-indicator {
    &:not(.dragging):not(.hovering) {
      border-color: transparent;
      background-color: transparent;

      > range > trough {
        > slider {
          min-width: 4px;
          min-height: 4px;
          margin: 4px - 1px;
          border: 1px solid rgba($base_color, $lower_opacity);
        }
      }

      button {
        min-width: 4px;
        min-height: 4px;
        margin: 4px - 1px;
        border: 1px solid rgba($base_color, $lower_opacity);
        border-radius: $circular_radius;
        background-color: $hint_fg_color;
        background-clip: padding-box;
        -gtk-icon-source: none;

        &:disabled { background-color: $disabled_secondary_fg_color; }
      }

      &.horizontal {
        > range > trough > slider { min-width: $_slider_min_length; }

        button { min-width: 8px; }
      }

      &.vertical {
        > range > trough > slider { min-height: $_slider_min_length; }

        button { min-height: 8px; }
      }
    }

    &.dragging,
    &.hovering {
      background-color: rgba($base_color, $higher_opacity);
    }
  }

  &.horizontal > range > trough > slider { min-width: $_slider_min_length; }

  &.vertical > range > trough > slider { min-height: $_slider_min_length; }

  // button styling
  button {
    @extend %simple_flat_button;

    min-width: 16px;
    min-height: 16px;
    padding: 0;
    border-radius: 0;
  }

  // button icons
  &.vertical {
    button {
      &.down { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-up-symbolic'); }
    }
  }

  &.horizontal {
    button {
      &.down { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-start-symbolic'); }
    }
  }
}


/**********
 * Switch *
 **********/
$switch_width: if($compact == 'false', 42px, 38px);
$switch_height: if($compact == 'false', 20px, 16px);

switch {
  transition: $longer_transition;
  // margin: $container_padding 0;
  padding: 0;
  min-height: $switch_height;
  min-width: $switch_width;
  border: 4px solid transparent;
  border-radius: $circular_radius;
  background-color: $track_color;
  background-clip: padding-box;
  color: transparent;
  font-size: 0;

  &:disabled { background-color: $fill_color; }

  &:checked {
    background-color: rgba($accent_color, 0.35);
    color: transparent;

    &:disabled { background-color: rgba($accent_color, 0.2); }
  }

  > slider {
    transition: $shorter_duration, $shadow_transition;
    min-width: $switch_height + 4px;
    min-height: $switch_height + 4px;
    margin: -4px (0 - $container_padding / 2);
    border-radius: $circular_radius;
    box-shadow: $shadow_1;
    background-color: $button_bg_color;
    color: transparent;
    background-position: center;
    background-repeat: no-repeat;
    background-image: -gtk-scaled(url('assets/switch-slider-unchecked#{$asset_suffix}.png'),
                                  url('assets/switch-slider-unchecked#{$asset_suffix}@2.png'));
  }

  &:hover > slider { box-shadow: $shadow_2; }

  &:checked > slider {
    transition: $shorter_duration, $shadow_transition, margin 0;
    // animation: needs_attention $longer_duration $deceleration_curve;
    background-color: $accent_color;
    color: transparent;
    background-image: -gtk-scaled(url('assets/switch-slider-checked#{$asset_suffix}.png'),
                                  url('assets/switch-slider-checked#{$asset_suffix}@2.png'));
  }

  &:disabled > slider { background-color: $alt_base_color; }

  &:checked:disabled > slider { animation: none; background-color: mix($base_color, $accent_color, 50%); }

  row:selected & {
    &:checked {
      background-color: rgba(darken($accent_color, 15%), 0.35);

      &:disabled { background-color: rgba(darken($accent_color, 15%), 0.2); }

      > slider { background-color: darken($accent_color, 10%); }
    }
  }
}


/*************************
 * Check and Radio items *
 *************************/
// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly

// selection-mode
.view.content-view.check:not(list),
.content-view .tile check:not(list) {
  min-height: 40px;
  min-width: 40px;
  margin: 0;
  padding: 0;
  box-shadow: none;
  background-color: transparent;
  background-image: none;
  -gtk-icon-shadow: $shadow_1;

  &:hover, &:active { -gtk-icon-shadow: $shadow_2; }

  @each $s, $as in ('', '-unchecked'),
                   (':checked', '-checked') {
    &#{$s} {
      -gtk-icon-source: -gtk-scaled(url("assets/selectionmode-checkbox#{$as}#{$asset_suffix}.png"),
                                    url("assets/selectionmode-checkbox#{$as}#{$asset_suffix}@2.png"));
    }
  }
}

checkbutton,
radiobutton {
  outline: none;
}

checkbutton.text-button,
radiobutton.text-button {
  // this is for a nice focus on check and radios text
  padding: 2px;
  outline-offset: 0;

  label:not(:only-child) { margin: 0 4px; }
}

%row_selected_button,
checkbutton check,
radiobutton radio {
  row &:selected,
  treeview.view &:selected,
  row.activatable &:selected {
    &, &:focus {
      &, &:active, &:checked, &:indeterminate {
        color: $inverse_secondary_fg_color;
        &:disabled { color: $inverse_disabled_secondary_fg_color; }
      }

      &:hover {
        color: $inverse_fg_color;
        &:disabled { color: $inverse_disabled_fg_color; }
      }
    }
  }
}

check,
radio {
  min-height: 24px;
  min-width: 24px;
  margin: -($large_size - 24px) / 2;
  padding: ($large_size - 24px) / 2;
  background-color: transparent;
  border: none;
  outline: none;
  @extend %simple_flat_button;
  @extend %circular_button;

  &:checked, &:indeterminate {
    color: $accent_color;
    &:disabled { color: $disabled_accent_color; }
  }

  // &:only-child { margin: -12px; }

  @extend %row_selected_button;

  popover modelbutton.flat & {
    &, &:hover, &:focus, &:focus:hover, &:active, &:disabled {
      transition: none; // FIXME: this is a workaround for a popover check/radio long transition issue
      box-shadow: none;
      background-image: none;
    }

    &.left:dir(rtl) {
      margin-left: -12px;
      margin-right: -4px;
    }

    &.right:dir(ltr) {
      margin-left: -4px;
      margin-right: -12px;
    }
  }

  popover.menu modelbutton & {
    transition: none;
    margin: 0; // this is a workaround for a menu check/radio size allocation issue
    padding: 0;

    &:dir(ltr) { margin-right: 8px; }
    &:dir(rtl) { margin-left: 8px; }

    &:not(:checked):not(:indeterminate):not(:disabled) { color: $menu_fg_color; }

    // &:hover, &:checked:hover, &:indeterminate:hover { color: $inverse_fg_color; }
    // &:disabled { color: $inverse_disabled_fg_color; }

    &, &:hover, &:disabled {
      box-shadow: none;
      // color: inherit;
    }
  }
}

%check,
check {
  -gtk-icon-size: 24px;
  -gtk-icon-source: -gtk-recolor(url("assets/scalable/checkbox-unchecked-symbolic.svg"));

  &:checked { -gtk-icon-source: -gtk-recolor(url("assets/scalable/checkbox-checked-symbolic.svg")); }

  &:indeterminate { -gtk-icon-source: -gtk-recolor(url("assets/scalable/checkbox-mixed-symbolic.svg")); }
}

%radio,
radio {
  -gtk-icon-size: 24px;
  -gtk-icon-source: -gtk-recolor(url("assets/scalable/radio-unchecked-symbolic.svg"));

  &:checked { -gtk-icon-source: -gtk-recolor(url("assets/scalable/radio-checked-symbolic.svg")); }

  &:indeterminate { -gtk-icon-source: -gtk-recolor(url("assets/scalable/radio-mixed-symbolic.svg")); }
}

%small_check,
popover.menu modelbutton check {
  min-height: 16px;
  min-width: 16px;
  border-radius: $buttons_radius;
  -gtk-icon-size: 16px;
  -gtk-icon-source: -gtk-recolor(url("assets/scalable/small-checkbox-unchecked-symbolic.svg"));

  &:checked { -gtk-icon-source: -gtk-recolor(url("assets/scalable/small-checkbox-checked-symbolic.svg")); }

  &:indeterminate { -gtk-icon-source: -gtk-recolor(url("assets/scalable/small-checkbox-mixed-symbolic.svg")); }
}

%small_radio,
popover.menu modelbutton radio {
  min-height: 16px;
  min-width: 16px;
  border-image: none;
  -gtk-icon-size: 16px;
  -gtk-icon-source: -gtk-recolor(url("assets/scalable/small-radio-unchecked-symbolic.svg"));

  &:checked { -gtk-icon-source: -gtk-recolor(url("assets/scalable/small-radio-checked-symbolic.svg")); }

  &:indeterminate { -gtk-icon-source: -gtk-recolor(url("assets/scalable/small-radio-mixed-symbolic.svg")); }
}

// ANIMATION:
// this is made with those pretty convoluted transitions, since checks and radios have to animate only on state changes,
// the transformation is set on the active state and it get reset on the checked state.
check:not(:checked):active { -gtk-icon-transform: rotate(90deg); }

// radio:not(:checked):active { -gtk-icon-transform: scale(0); }

check:not(:checked):indeterminate:active,
radio:not(:checked):indeterminate:active { -gtk-icon-transform: scaleX(-1); } // instead of rotateY(180deg)

check:not(:checked),
radio:not(:checked) {
  & {
    transition: $shorter_transition,
                background-size $ripple_duration $deceleration_curve,
                background-image $ripple_duration * 2 $deceleration_curve,
                -gtk-icon-transform 0;
  }

  &:active {
    transition: $shorter_transition,
                background-size 0,
                background-image 0,
                -gtk-icon-transform 0;
  }

  popover.menu modelbutton & { transition: none; }
}

treeview.view check,
treeview.view radio {
  padding: 0;

  &:hover {
    box-shadow: inset 0 0 0 9999px gtkalpha($fg_color, 0.05);

    &:disabled { box-shadow: none; }

    &:selected { box-shadow: inset 0 0 0 9999px gtkalpha($inverse_fg_color, 0.05); }
  }

  & {
    color: $secondary_fg_color;

    &:hover, &:active { color: $fg_color; }

    &:disabled { color: $disabled_secondary_fg_color; }

    &:checked, &:indeterminate { color: $accent_color; }

    &:checked:disabled, &:indeterminate:disabled { color: $disabled_accent_color; }
  }
}

treeview.view radio:checked {
  -gtk-icon-source: -gtk-recolor(url("assets/scalable/radio-checked-symbolic.svg"));
  border-image: none;
}

/***************
 * Header bars *
 ***************/

 %headerbar_switcher_button {
  background-color: transparent;
  box-shadow: none;
  border-radius: 0;

  &:hover {
    color: $titlebar_fg_color;
    background-color: transparent;
    box-shadow: inset 0 -2px $titlebar_track_color;
  }

  &:active {
    color: $titlebar_fg_color;
    background-color: transparent;
    box-shadow: inset 0 -2px $primary_color;
  }

  &:checked {
    border-radius: 0;
    color: $titlebar_fg_color;
    background-color: transparent;
    box-shadow: inset 0 -2px $primary_color;
    background-image: none;
  }

  &:checked:backdrop, &:active:backdrop {
    color: $titlebar_secondary_fg_color;
    box-shadow: inset 0 -2px $titlebar_disabled_fg_color;
  }
}

headerbar {
  transition: background-color $shorter_duration $deceleration_curve, color $shorter_duration $deceleration_curve;
  min-height: $large_size;
  padding: 0;
  margin: 0;
  box-shadow: inset 0 1px $titlebar_highlight_color, inset 0 -1px $border_color;
  background-color: $titlebar_bg_color;
  color: $titlebar_fg_color;
  border-radius: $windows_radius $windows_radius 0 0;
  @extend %toolbar;

  &:disabled :not(button) > label { color: $titlebar_disabled_fg_color; }

  &:backdrop {
    color: $titlebar_secondary_fg_color;

    &:disabled :not(button) > label { color: $titlebar_disabled_secondary_fg_color; }
  }

  .sidebar-pane & { border-top-right-radius: 0; }
  .content-pane & { border-top-left-radius: 0; }

  .title {
    padding: 0 12px;
    font-weight: bold;
  }

  .subtitle {
    padding: 0 12px;
    font-size: smaller;

    @extend .dim-label;
  }

  entry {
    background-color: if($variant == 'light', $base_color, lighten($base_color, 5%));
    &:focus { background-color: if($variant == 'light', lighten($base_color, 3%), lighten($base_color, 8%)); }
  }

  // Reset headerbar linked rules
  .linked:not(.vertical) > entry:not(.flat) { border-radius: $buttons_radius; }
  .linked:not(.vertical) > button {
    border-radius: $buttons_radius;
  }

  button:not(.suggested-action):not(.destructive-action) {
    @extend %flat_button;
    border-image: none;
    color: $titlebar_secondary_fg_color;
    @extend %circular_button;

    &:hover, &:active { color: $titlebar_fg_color; }

    &:disabled { color: $titlebar_disabled_secondary_fg_color; }

    &:checked {
      border-image: none;
      background-color: $primary_color;
      color: $inverse_fg_color;
      background-image: $theme_image;
      background-size: auto auto;
      background-position: center center;
      background-repeat: no-repeat;
      box-shadow: if($variant == 'light', $header_shadow_light, $header_shadow_dark);

      &:disabled {
        color: $inverse_disabled_fg_color;
        background-color: rgba($primary_color, 0.5);
      }
    }

    &:backdrop {
      color: $titlebar_hint_fg_color;
      &:hover, &:active { color: $titlebar_secondary_fg_color; }
      &:disabled { color: $titlebar_disabled_secondary_fg_color; }
      &:checked {
        background-image: none;
        color: $inverse_secondary_fg_color;
        &:disabled { color: $inverse_disabled_secondary_fg_color; }
      }
    }
  }

  button.suggested-action, button.destructive-action {
    @extend %circular_button;

    &:disabled {
      background-color: $titlebar_divider_color;
      color: $titlebar_disabled_fg_color;
    }
  }

  splitbutton {
    border-radius: $circular_radius;
  }

  > windowhandle > box {
    padding: $container_padding;

    &,
    > box.start,
    > box.end {
      border-spacing: $container_padding;
    }

    &, > widget {
      > box.start:dir(ltr),
      > box.end:dir(rtl) {
        margin-right: 0;
      }

      > box.start:dir(rtl),
      > box.end:dir(ltr) {
        margin-left: 0;
      }
    }
  }

  // switch {
  //   margin-top: ($large_size - $switch_height - 8px) / 2;
  //   margin-bottom: ($large_size - $switch_height - 8px) / 2;
  // }

  // reset button margins of the spinbutton
  spinbutton button {
    margin-top: 0;
    margin-bottom: 0;
  }

  &.titlebar,
  .titlebar &,
  .solid-csd &,
  box > &:only-child {
    // draw hilight and shadows
    box-shadow: inset 0 1px $titlebar_highlight_color, inset 0 -1px $border_color;
  }

  // override unwanted side-borders
  box &:not(:only-child):first-child,
  box &:not(:only-child):last-child {
    border-left-color: $titlebar_bg_color;
    border-right-color: $titlebar_bg_color;
  }

  &.selection-mode {
    // FIXME: 0.00001s is workaround for transition bug of gtk+ 3.22
    // see https://bugzilla.gnome.org/show_bug.cgi?id=774064
    transition: background-color 0.00001s $longer_duration, color $longer_duration $deceleration_curve;
    animation: header_ripple_effect $longer_duration $deceleration_curve;
    box-shadow: inset 0 1px $alt_highlight_color, inset 0 -1px $border_color;
    background-color: $primary_color;
    color: $inverse_fg_color;

    &:backdrop {
      color: $inverse_secondary_fg_color;
    }

    .subtitle:link { @extend %link_selected; }

    button:not(.suggested-action):not(.destructive-action) {
      border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                                    currentColor 0%,
                                    transparent 0%)
                                    0 0 0 / 0 0 0;
      color: $inverse_fg_color;
      &:disabled { color: $inverse_disabled_fg_color; }
      &:hover { color: $inverse_fg_color; }
      &:checked {
        border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                                      currentColor 100%,
                                      transparent 0%)
                                      0 0 2 / 0 0 2px;
        color: $inverse_fg_color;
        &:disabled { color: $inverse_disabled_fg_color; }
      }

      &:backdrop {
        color: $inverse_secondary_fg_color;
        &:disabled { color: $inverse_disabled_secondary_fg_color; }
        &:checked {
          color: $inverse_secondary_fg_color;
          &:disabled { color: $inverse_disabled_secondary_fg_color; }
        }
      }
    }

    .selection-menu {
      padding-left: 16px;
      padding-right: 16px;

      .arrow { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
    }
  }

  .linked:not(.vertical).path-bar,
  stackswitcher.linked:not(.vertical) {
    > button {
      @extend %headerbar_switcher_button;
    }
  }

  // headerbar titlebutton separator
  separator.titlebutton { @extend %header_separator; }

  // squared corners when the window is maximized, tiled, or fullscreen
  .tiled &,
  .tiled-top &,
  .tiled-right &,
  .tiled-bottom &,
  .tiled-left &,
  .maximized &,
  .fullscreen & {
    border-radius: 0;
  }

  &.default-decoration {
    min-height: $medium_size;
    padding: 0;
    box-shadow: inset 0 1px $titlebar_highlight_color;
    background-color: $titlebar_bg_color;
    background-image: none;

    .tiled &,
    .maximized &,
    .fullscreen & { box-shadow: none; }

    > windowhandle > box {
      padding-top: 0;
      padding-bottom: 0;
    }

    windowcontrols {
      button {
        @extend %circular_button;
        min-height: 16px;
        min-width: 16px;
        margin: 0 2px;
        padding: 0;
      }
    }
  }

  .solid-csd & {
    &:dir(rtl), &:dir(ltr) { // specificity bump
      border-radius: 0;
      box-shadow: inset 0 1px $titlebar_highlight_color;
    }
  }
}

%headerbar-flat {
  background: none;
  box-shadow: none;
  color: inherit;
  min-height: $large_size;

  > windowhandle > box {
    padding: $container_padding;
  }

  &.default-decoration {
    min-height: $medium_size;

    > windowhandle > box {
      padding-top: 0;
      padding-bottom: 0;
    }
  }
}

%headerbar-inline {
  @extend %headerbar-flat;

  &:backdrop {
    transition: none;

    > windowhandle {
      filter: none;
      transition: none;
    }
  }

  window.devel & > windowhandle {
    background-image: none;
  }
}

%headerbar-shrunk {
  min-height: $large_size;

  > windowhandle > box {
    padding-top: $container_padding;
    padding-bottom: $container_padding;
  }

  &.default-decoration {
    min-height: $medium_size;

    > windowhandle > box {
      padding-top: 0;
      padding-bottom: 0;
    }
  }
}

%header_separator {
  min-width: 0;
  min-height: 0;
  background-color: transparent;
  border: none;
}

// Development versions of apps to use a differently styled headerbar
window.devel {
  headerbar.titlebar {
    $c: darken($bg_color, 10%);
    $gradient: cross-fade(10% -gtk-icontheme("system-run-symbolic"), image(transparent)) 90% 0/256px 256px no-repeat,
               linear-gradient(to right, transparent 65%, transparentize($primary_color, 0.8)),
               linear-gradient(to top, darken($c, 3%), $c 3px, lighten($c, 6%));
    @if $variant == 'dark' {
      $gradient: cross-fade(10% -gtk-icontheme("system-run-symbolic"), image(transparent)) 90% 0/256px 256px no-repeat,
                 linear-gradient(to right, transparent 65%, transparentize($primary_color, 0.9)),
                 linear-gradient(to top, lighten($c, 3%) 3px, lighten($c, 5%));
    }

    background: $bg_color $gradient;

    &:backdrop {
      background: $bg_color cross-fade(10% -gtk-icontheme("system-run-symbolic"), image(transparent)) 90% 0/256px 256px no-repeat,
                  image($bg_color); /* background-color would flash */
    }
  }
}

/************
 * GtkScale *
 ************/
scale {
  // sizing
  $_marks_length: 8px;
  $_marks_distance: 7px;

  $trough_size: 2px;

  $slider_size: 32px;
  $marks_slider_size: 38px;

  $slider_margin: -($slider_size - $trough_size) / 2;
  $marks_slider_margin: -($marks_slider_size - $trough_size) - $slider_margin;

  $color_slider_margin: -($slider_size) / 2;
  $color_marks_slider_margin: -($marks_slider_size - 16px) - $color_slider_margin;

  min-height: $medium_size - $slider_size;
  min-width: $medium_size - $slider_size;
  padding: ($slider_size / 2);

  // the backing bit
  > trough {
    transition: background-color $shorter_duration $deceleration_curve;
    outline: none;
    background-color: $track_color;

    &:disabled { background-color: $fill_color; }

    > slider {
      min-height: $slider_size;
      min-width: $slider_size;
      margin: $slider_margin;

      &, &:focus, &:hover, &:active {
        border: none;
        outline: none;
        box-shadow: none;
        background-color: transparent;
      }
    }
  }

  // the colored part of the backing bit
  > trough > highlight {
    transition: background-color $shorter_duration $deceleration_curve;
    background-color: $accent_color;

    &:disabled { background-color: transparent; }
  }

  // this is another differently styled part of the backing bit, the most relevant use case is for example
  // in media player to indicate how much video stream as been cached
  > trough > fill {
    transition: background-color $shorter_duration $deceleration_curve;
    background-color: $track_color;

    &:disabled { background-color: transparent; }
  }

  > trough > slider {
    transition: background-color $shorter_duration $deceleration_curve,
                background-size $ripple_duration $deceleration_curve,
                background-image $ripple_duration * 2 $deceleration_curve;
    background-repeat: no-repeat;
    background-position: center;
    background-size: auto, 1000% 1000%;
    border-radius: 50%;
    color: transparent;

    @each $s, $as in ('', ''),
                     (':disabled', '-disabled') {
      &#{$s} {
        $_url: 'assets/scale-slider#{$as}#{$asset_suffix}';

        background-image: -gtk-scaled(url('#{$_url}.png'), url('#{$_url}@2.png'));
      }
    }

    &:hover { background-color: rgba($accent_color, 0.08); }

    &:focus { background-color: rgba($accent_color, 0.12); }

    &:focus:hover { background-color: rgba($accent_color, 0.16); }

    &:active {
      transition: background-color $shorter_duration $deceleration_curve,
                  background-size 0,
                  background-image 0;
      animation: scale_ripple_effect $longer_duration $deceleration_curve forwards;
      background-size: auto, 0% 0%;
      background-color: rgba($accent_color, 0.08);
      color: rgba($accent_color, 0.12);
    }
  }

  // click-and-hold the slider to activate
  &.fine-tune {
    // to make the slider shrink in fine-tune mode
    slider { background-size: calc(100% - 12px); }
  }

  > marks label,
  > value { color: $hint_fg_color; }

  > marks {
    color: $track_color;

    @each $marks_class, $marks_pos, $marks_margin in (top, top, bottom),
                                                     (bottom, bottom, top),
                                                     (left, left, right),
                                                     (right, right, left) {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length);
      }
    }
  }

  &.fine-tune marks {
    @each $marks_class, $marks_pos, $marks_margin in (top, top, bottom),
                                                     (bottom, bottom, top),
                                                     (left, left, right),
                                                     (right, right, left) {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance - 1px;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length - 1px);
      }
    }
  }

  &.horizontal {
    indicator {
      min-height: $_marks_length;
      min-width: 1px;
    }
  }

  &.vertical {
    indicator {
      min-height: 1px;
      min-width: $_marks_length;
    }
  }

  &.marks-before:not(.marks-after),
  &.marks-after:not(.marks-before) {
    > trough > slider {
      transform: none;
    }
  }

  // *WARNING* scale with marks madness following

  @each $dir_class, $dir_infix in ('horizontal', 'horz'),
                                  ('vertical', 'vert') {
    @each $marks_infix, $marks_class in ('marks-before', 'marks-before:not(.marks-after)'),
                                        ('marks-after', 'marks-after:not(.marks-before)') {
      &.#{$dir_class}.#{$marks_class} {
        slider {
          @each $state, $state_infix in ('', ''),
                                        (':disabled', '-disabled') {
            &#{$state} {
              $_scale_asset: 'assets/scale-#{$dir_infix}-#{$marks_infix}-slider#{$state_infix}#{$asset_suffix}';

              background-image: -gtk-scaled(url('#{$_scale_asset}.png'), url('#{$_scale_asset}@2.png'));
            }
          }
        }
      }
    }
  }

  &.color {
    min-height: 0;
    min-width: 0;

    &.horizontal {
      padding: 0 0 12px 0;

      slider {
        &:dir(ltr), &:dir(rtl) { // specificity bump
          margin-bottom: $color_slider_margin;
          margin-top: $color_marks_slider_margin;
        }
      }
    }

    &.vertical {
      &:dir(ltr) {
        padding: 0 0 0 12px;

        slider {
          margin-left: $color_slider_margin;
          margin-right: $color_marks_slider_margin;
        }
      }

      &:dir(rtl) {
        padding: 0 12px 0 0;

        slider {
          margin-right: $color_slider_margin;
          margin-left: $color_marks_slider_margin;
        }
      }
    }
  }
}


/*****************
 * Progress bars *
 *****************/
progressbar {
  // sizing
  &.horizontal {
    > trough {
      min-width: 150px;
      &, > progress { min-height: $bar_size; }
    }
  }

  &.vertical {
    > trough {
      min-height: 80px;
      &, > progress { min-width: $bar_size; }
    }
  }

  // FIXME: insensitive state missing and some other state should be set probably
  color: $hint_fg_color;
  font-size: smaller;

  > trough {
    border-radius: $circular_radius;
    background-color: rgba($progress_color, $lower_opacity);
  }

  > trough > progress {
    border-radius: $circular_radius;
    background-color: $progress_color;
    background-image: $progress_image;
    background-size: auto auto;
    background-position: center center;
    background-repeat: no-repeat;
  }

  &.osd { // progressbar.osd used for epiphany page loading progress
    min-width: 3px;
    min-height: 3px;
    background-color: transparent;
    padding: 0;
    margin: 0;
    box-shadow: none;

    > trough {
      border-style: none;
      border-radius: 0;
      background-color: transparent;
      box-shadow: none;

      > progress {
        border-style: none;
        border-radius: 0;
      }
    }
  }

  trough.empty progress { all: unset; } // makes the progress indicator disappear, when the fraction is 0
}


/*************
 * Level Bar *
 *************/
levelbar {
  &.horizontal {
    block { min-height: $bar_size; }

    &.discrete block {
      min-width: $medium_size;

      &:not(:last-child) { margin-right: 2px; }
    }
  }

  &.vertical {
    > trough > block { min-width: $bar_size; }

    &.discrete block {
      min-height: $medium_size;

      &:not(:last-child) { margin-bottom: 2px; }
    }
  }

  // imitate the entry style
  > trough {
    padding: 2px;
    border-radius: $material_radius;
    box-shadow: $shadow_1;
    background-color: $base_color;

    &:disabled { background-color: $alt_base_color; }
  }

  > trough > block {
    &.low { background-color: $warning_color; }

    &.high,
    &:not(.empty) { background-color: $primary_color; }

    &.full { background-color: $success_color; }

    &.empty { background-color: $fill_color; }
  }
}


/****************
 * Print dialog *
*****************/
window.dialog.print {
  drawing {
    color: $fg_color;
    background: none;
    border: none;
    padding: 0;

    paper {
      padding: 0;
      border: 1px solid $border_color;
      background-color: $base_color;
      color: $fg_color;
    }
  }

  .dialog-action-box { margin: 12px; }
}


/**********
 * Frames *
 **********/
frame,
.frame {
  margin: 0;
  padding: 0;
  border: 1px solid $border_color;
  border-radius: 0;
  box-shadow: none;

  &.flat { border-style: none; }
}

frame.flat > border { border-style: none; } // for backward compatibility

frame {
  border-radius: $menu_radius;

  > label {
    margin: 4px;
  }
}

scrolledwindow {
  // This is used when content is touch-dragged past boundaries.
  // draws a box on top of the content, the size changes programmatically.
  @at-root overshoot {
    &.top { @include overshoot(top); }

    &.bottom { @include overshoot(bottom); }

    &.left { @include overshoot(left); }

    &.right { @include overshoot(right); }
  }

  // Overflow indication, works similarly to the overshoot, the size if fixed tho.
  // @at-root undershoot {
  //   &.top { @include undershoot(top); }
  //
  //   &.bottom { @include undershoot(bottom); }
  //
  //   &.left { @include undershoot(left); }
  //
  //   &.right { @include undershoot(right); }
  // }

  @at-root junction { // the small square between two scrollbars
    border-style: solid none none solid;
    border-width: 1px;
    border-color: $border_color;
    background-color: $base_color;

    &:dir(rtl) { border-style: solid solid none none; }
  }
}

// vbox and hbox separators
separator {
  min-width: 1px;
  min-height: 1px;
  background-color: $border_color;

  &.spacer {
    border: none;
    background-color: transparent;
  }
}

%hide_separators {
  min-width: 0;
  min-height: 0;
  background-color: transparent;
}


/*********
 * Lists *
 *********/
listview,
list {
  border-color: $border_color;
  background-color: $base_color;
  color: $secondary_fg_color;

  > row {
    padding: 2px;
    background-clip: padding-box;
  }

  > row.expander { padding: 0px; }
  > row.expander .row-header { padding: 2px; }

  &.horizontal row.separator,
  &.separators.horizontal > row:not(.separator) {
    border-left: 1px solid $border_color;
  }

  &:not(.horizontal) row.separator,
  &.separators:not(.horizontal) > row:not(.separator) {
    border-bottom: 1px solid $border_color;
  }
}

// FIXME
$row_transition: $shorter_transition, box-shadow 0, color 0;

row {
  @at-root %row_activatable, &.activatable {
    transition: $row_transition;
    background-color: transparent;

    &:hover {
      transition: $row_transition, background-color 0;
      background-color: $row_fill_color;
    }

    &.has-open-popup, // this is for indicathing which row generated a popover see https://bugzilla.gnome.org/show_bug.cgi?id=754411
    &:active {
      transition: $row_transition;
      background-color: $semi_fill_color;
      background-size: 0% 0%;
    }
  }

  &:selected {
    @extend %selected_items;

    &:hover, &:active {
      background-color: $primary_color;
    }
  }

  button.circular { margin: 0 $container_padding; } // To show the circular button shadow completely on row
  button.image-button { @extend %circular_button; } // Use circular button for image buttons on row
  .linked button { @extend %linked; }
}

treeexpander {
  border-spacing: $container_padding;
}

columnview {
  // move padding to child cells
  > listview > row {
    padding: 0;

    // align horizontal sizing with header buttons
    > cell {
      padding: $container_padding + 2px $container_padding;

      &:not(:first-child) {
        border-left: 1px solid transparent;
      }
    }
  }

  // make column separators visible when :show-column-separators is true
  &.column-separators > listview > row > cell {
    border-left-color: $solid_border_color;
  }

  // shrink vertically for .data-table
  &.data-table > listview > row > cell {
    padding-top: $container_padding / 2;
    padding-bottom: $container_padding / 2;
  }

  > header > button {
    padding-left: $container_padding;
    padding-right: $container_padding;
    border-left: 1px solid transparent;

    &:first-child {
      border-left-width: 0;
    }
  }

  // make column separators visible when :show-column-separators is true
  &.column-separators {
    > listview > row > cell,
    > header > button {
      border-left-color: $border_color;
    }
  }

  > listview:not(.horizontal).separators > row:not(.separator) {
    border-top: 1px solid $border_color;
    border-bottom: none;
  }

  // shrink vertically for .data-table
  &.data-table > listview > row > cell {
    padding-top: $container_padding / 2;
    padding-bottom: $container_padding / 2;
  }

  ~ undershoot.top {
    box-shadow: inset 0 1px $border_color;
  }

  row:not(:selected) cell editablelabel {
    &:not(.editing):focus-within {
      outline: 2px solid $row_fill_color;
    }

    &.editing:focus-within {
      outline: 2px solid $primary_color;
    }

    &.editing text selection {
      color: $inverse_fg_color;
      background-color: $primary_color;
    }
  }
}

.rich-list { /* rich lists usually containing other widgets than just labels/text */
  & > row {
    padding: $container_padding $container_padding * 2;
    min-height: 32px; /* should be tall even when only containing a label */

    & > box {
      border-spacing: $container_padding * 2;
    }
  }
}

/****************
 * AdwActionRow *
 ****************/

row {
  label.subtitle {
    font-size: smaller;
    @extend .dim-label;
  }

  > box.header {
    margin-left: $container_padding * 2;
    margin-right: $container_padding * 2;
    border-spacing: $container_padding;
    min-height: $large_size;

    > .icon:disabled {
      filter: opacity(0.35);
    }

    > box.title {
      margin-top: $container_padding;
      margin-bottom: $container_padding;
      border-spacing: $container_padding / 2;
      padding: 0;

      // Specificity bump for header bar
      &,
      > .title,
      > .subtitle {
        padding: 0;
        font-weight: inherit;
      }
    }

    > .prefixes,
    > .suffixes {
      border-spacing: $container_padding;
    }

    > .icon,
    > .prefixes {
      &:dir(ltr) { margin-right: $container_padding; }
      &:dir(rtl) { margin-left: $container_padding; }
    }
  }
}

/***************
 * AdwComboRow *
 ***************/

row.combo {
  image.dropdown-arrow:disabled {
    filter: opacity(0.35);
  }

  listview.inline {
    background: none;
    border: none;
    box-shadow: none;
    color: inherit;

    &, &:disabled {
      background: none;
      color: inherit;
    }
  }

  popover > contents {
    min-width: 120px;
  }
}

/******************
 * AdwExpanderRow *
 ******************/

@mixin margin-start($margin) {
  &:dir(ltr) {
    margin-left: $margin;
  }

  &:dir(rtl) {
    margin-right: $margin;
  }
}

$boxed_radius: $buttons_radius - 1px;

%boxed_list_row {
  transition: 200ms $deceleration_curve;
  color: $secondary_fg_color;
  border-bottom: 1px solid $border_color;

  .osd &:focus:focus-visible {
    outline-color: $fill_color;
  }
}

row.expander {
  // Drop transparent background on expander rows to let nested rows handle it,
  // avoiding double highlights.
  background: none;
  padding: 0;

  > box > list {
    background: none;
    color: inherit;
  }

  list.nested {
    background-color: $base_color;
    color: inherit;
  }

  list.nested > row {
    @extend %boxed_list_row;
  }

  // AdwExpanderRow arrow rotation
  image.expander-row-arrow {
    transition: 200ms $deceleration_curve;
    @include margin-start(6px);
  }

  &:checked image.expander-row-arrow {
    -gtk-icon-transform: rotate(0turn);
  }

  &:not(:checked) image.expander-row-arrow {
    @extend .dim-label;

    &:dir(ltr) {
      -gtk-icon-transform: rotate(0.5turn);
    }

    &:dir(rtl) {
      -gtk-icon-transform: rotate(-0.5turn);
    }
  }

  &:checked image.expander-row-arrow:not(:disabled) {
    color: $primary_color;
  }

  .osd &:checked image.expander-row-arrow:not(:disabled) {
    color: inherit;
  }

  image.expander-row-arrow:disabled {
    filter: opacity(0.35);
  }
}

/*****************
 * Boxed Lists *
 *****************/

// Deprecated: use .boxed-list instead
list.boxed-list {
  @extend %card;

  > .dim-label { padding: $container_padding * 3; }

  > row {
    // Regular rows and expander header rows background
    &, &.expander row.header {
      @extend %boxed_list_row;
    }

    &.expander {
      border: none;
    }

    // Rounded top
    &:first-child {
      &, &.expander row.header {
        border-top-left-radius: $boxed_radius;
        border-top-right-radius: $boxed_radius;
      }
    }

    // Rounded bottom
    &:last-child, &:only-child {
      &,
      &.expander:not(:checked),
      &.expander:not(:checked) row.header,
      &.expander:checked list.nested,
      &.expander:checked list.nested > row:last-child {
        border-bottom-left-radius: $boxed_radius;
        border-bottom-right-radius: $boxed_radius;
        border-bottom-width: 0;
      }
    }
  }
}

list.boxed-list-separate {
  background: none;
  color: $fg_color;

  > row {
    border: none;
    margin-bottom: 12px;
    @extend %card;

    &:last-child {
      margin-bottom: 0;
    }

    &.expander {
      row.header {
        @extend %boxed_list_row;
        border-top-left-radius: $boxed_radius;
        border-top-right-radius: $boxed_radius;
      }

      &:not(:checked) row.header,
      &.expander:checked list.nested,
      &.expander:checked list.nested > row:last-child {
        border-bottom-left-radius: $boxed_radius;
        border-bottom-right-radius: $boxed_radius;
        border-bottom: none;
      }
    }
  }
}

/*********************
 * App Notifications *
 *********************/
.app-notification {
  @extend %osd;
  @extend %toolbar_osd;
  margin: 8px;

  button { @extend %flat_button; }

  &.frame,
  border { border-style: none; }
}


/*************
 * Expanders *
 *************/
expander {
  transition: all $shorter_duration $deceleration_curve;
  min-width: 16px;
  min-height: 16px;
  -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
  -gtk-icon-transform: rotate(-90deg);

  &:dir(rtl) { -gtk-icon-transform: rotate(90deg); }

  color: $secondary_fg_color;

  &:hover, &:active { color: $fg_color; }

  &:checked { -gtk-icon-transform: unset; }

  &:disabled { color: $disabled_secondary_fg_color; }

  &:selected, row:selected & {
    color: $inverse_secondary_fg_color;

    &:hover, &:active { color: $inverse_fg_color; }

    &:disabled { color: $inverse_disabled_secondary_fg_color; }
  }
}


/************
 * Calendar *
 ************/
calendar {
  color: $secondary_fg_color;
  border: 1px solid $border_color;

  > header {
    border-bottom: 1px solid $border_color;

    > button {
      border: none;
      box-shadow: none;
      background: none;
      border-radius: 0;
    }
    > button:backdrop {
      background: none;
    }
  }

  > grid {
    > label {
      border-radius: 3px;
    }

    > label.today {
      background-color: rgba($fg_color, 0.15);

      &:selected {
        @extend %selected_items;
      }
    }

    > label.day-number {
      padding: 4px;

      &:selected{
        @extend %selected_items;
        border-radius: 3px;
      }
    }

    > label.day-number.other-month {
      color: gtkalpha(currentColor, 0.3);
    }
  }
}


/***********
 * Dialogs *
 ***********/
window.dialog {
  .dialog-content {
    padding: $container_padding $container_padding * 2;
  }
}

window.dialog.message { // Message Dialog styling
  color: $popover_fg;

  &.background {
    background-color: rgba($popover_bg, 0.95);
  }

  .titlebar {
    min-height: $small_size;
    border-style: none;
    box-shadow: inset 0 1px $titlebar_highlight_color;
    background-color: transparent;
    color: $popover_fg;

    &:backdrop {
      color: $popover_disabled_fg;
      background-color: transparent;
    }
  }

  box.dialog-vbox.vertical {
    margin-top: $container_padding;
    border-spacing: $container_padding * 4;

    > box.vertical {
      margin-bottom: $container_padding;
    }

    > box > box > box > label.title {
      font-weight: 800;
      font-size: 15pt;
    }
  }

  list, row, .view, textview.view > text {
    color: $popover_fg;
    background-color: darken($popover_bg, 3%);
    border-color: $popover_border;
  }

  .dialog-action-area {
    padding: $container_padding * 2;

    > button {
      @extend %popover_flat_button;
      padding: 8px 16px;
      border: none;
      color: $popover_fg;
      margin: 0;
      border-spacing: 0;
    }
  }

  @each $b_type, $b_color in (suggested-action, $suggested_color),
                             (destructive-action, $destructive_color) {
    .linked:not(.vertical).dialog-action-area > button.#{$b_type} {

      &, &:hover { color: $b_color; }

      &:active, &:checked {
        background-color: $b_color;
        color: white;
        border-color: $b_color;
        box-shadow: none;
      }

      &:disabled { opacity: 0.65; }
    }
  }

  entry {
    color: $popover_fg;
    @extend %popover_entry;
  }

  check, radio {
    color: $popover_disabled_fg;
  }

  expander {
    title > arrow {
      color: $inverse_secondary_fg_color;

      &:hover, &:active { color: $inverse_fg_color; }

      &:disabled { color: $inverse_disabled_secondary_fg_color; }
    }
  }
}

/********************
 * AdwMessageDialog *
 ********************/

window.messagedialog {
  color: $popover_fg;

  &.background {
    background-color: rgba($popover_bg, 0.95);
  }

  .response-area {
    button {
      @extend %popover_flat_button;
      padding: 8px 16px;
      border: none;
  
      &.suggested {
        color: $primary_color;
      }
  
      &.destructive {
        color: $destructive_color;
      }
    }
  }

  separator {
    background-color: $inverse_divider_color;
  }
}

window.messagedialog,
dialog.alert {
  .message-area {
    padding-top: 32px;
    padding-bottom: 9px;
    border-spacing: 24px;

    &.has-heading.has-body {
      border-spacing: 10px;

      > .child {
        margin-top: 8px;
      }
    }

    > .heading-bin, > .body, > .child {
      padding-left: 24px;
      padding-right: 24px;
    }
  }

  .response-area {
    padding: $container_padding * 2;
    padding-top: 12px;
    border-spacing: 12px;

    > button {
      min-height: 24px;
      min-width: 60px;
      padding: 10px 20px;
      border-radius: $buttons_radius;
    }
  }

  &.short {
    .message-area {
      padding-top: 24px;
      border-spacing: 18px;

      > .heading-bin, > .body, > .child {
        padding-left: 18px;
        padding-right: 18px;
      }

      &.has-heading.has-body {
        border-spacing: 6px;
      }
    }

    .response-area {
      padding: $container_padding * 2;
      padding-top: 9px;

      > button {
        min-width: 0;
        padding: 8px 16px;
      }
    }
  }
}

filechooser {
  .dialog-action-box { border-top: 1px solid $border_color; }

  #pathbarbox {
    border-bottom: 1px solid $border_color;
    background-color: $bg_color;
  }
}

filechooserbutton > button > box {
  border-spacing: 6px;
}

filechooserbutton:drop(active) {
  box-shadow: none;
}


/***********
 * Sidebar *
 ***********/

%sidebar_template {
  &:dir(ltr) {
    box-shadow: if($variant == light, $sidebar-light-ltr,
                                      $sidebar-dark-ltr);
  }
  &:dir(rtl) {
    box-shadow: if($variant == light, $sidebar-light-rtl,
                                      $sidebar-dark-rtl);
  }
}

.sidebar {
  border-style: none;
  background-color: $sidebar_bg_color;

  @at-root %sidebar_left,
  &:dir(ltr),
  &.left,
  &.left:dir(rtl) {
    border-right: 1px solid $solid_border_color;
    border-left-style: none;
  }

  @at-root %sidebar_right,
  &:dir(rtl),
  &.right {
    border-left: 1px solid $solid_border_color;
    border-right-style: none;
  }

  listview.view,
  list { background-color: transparent; }

  paned & { &.left, &.right, &.left:dir(rtl), &:dir(rtl), &:dir(ltr), & { border-style: none; }}
}

separator.sidebar,
leaflet .sidebar,
flap .sidebar { // reset
  &:dir(ltr),
  &.left,
  &.left:dir(rtl) {
    border-right: none;
  }

  &:dir(rtl),
  &.right {
    border-left: none;
  }
}

separator.sidebar {
  background-color: $border_color;
}

stacksidebar {
  list.separators:not(.horizontal) > row:not(.separator) {
    border-bottom: none;
  }

  row {
    padding: 10px 4px;

    > label {
      padding-left: 6px;
      padding-right: 6px;
    }

    &.needs-attention > label { @extend %needs_attention; }
  }

  // .frame list { @extend %sidebar_template; } // draw shadows
}


//
// Navigation Sidebar
//
.navigation-sidebar {
  padding: $container_padding; //only vertical padding. horizontal row size would clip

  > separator {
    margin: $container_padding;
  }

  > row {
    min-height: $menuitem_size;
    padding: $container_padding / 2 $container_padding;
    border-radius: $buttons_radius;
    margin: 0;

    + row {
      margin-top: $container_padding / 2;
    }

    &:hover,
    &:focus-visible:focus-within {
      color: $fg_color;
      background-color: rgba($fg_color, 0.06);
    }

    &:active {
      color: $fg_color;
      background-color: rgba($fg_color, 0.1);
    }

    &:selected {
      color: $fg_color;
      background-color: rgba($fg_color, 0.08);

      label { color: $fg_color; }

      &:hover {
        background-color: rgba($fg_color, 0.12);
      }

      &:focus-visible:focus-within {
        outline-width: 0;
        color: $inverse_fg_color;
        background-color: $primary_color;
        &:hover { background-color: lighten($primary_color, 10%); }
      }
    }

    &:disabled { color: $disabled_secondary_fg_color; }
  }
}


/****************
 * File chooser *
 ****************/
// dim the sidebar icons, see bug #786613 for details on this oddity

%selected_sidebar_button {
  color: rgba($primary_color, 0.75);

  &:hover, &:active { color: $primary_color; }

  &:disabled { color: rgba($primary_color, 0.35); }

  &:checked {
    background-color: rgba($primary_color, 0.1);
    color: $primary_color;
  }

  &:checked:disabled {
    background-color: rgba($primary_color, 0.05);
    color: rgba($primary_color, 0.55);
  }
}

row {
  image.sidebar-icon { color: $secondary_fg_color; }

  &:selected image.sidebar-icon { color: $inverse_secondary_fg_color; }
}

placessidebar {
  > viewport.frame { border-style: none; }

  .navigation-sidebar {
    > row {
      // Needs overriding of the GtkListBoxRow padding
      min-height: 32px;
      padding: 0;
      margin: 0;
      border-radius: 0 $buttons_radius $buttons_radius 0;
  
      // Using margins/padding directly in the SidebarRow
      // will make the animation of the new bookmark row jump
      > revealer { padding: 0 12px; }
  
      &:selected {
        background-color: $row_fill_color;
        color: $primary_color;
  
        image.sidebar-icon, label.sidebar-label { color: if($variant == 'light', $primary_color, lighten($primary_color, 15%)); }
      }
  
      &:disabled { color: $disabled_fg_color; }
  
      image.sidebar-icon {
        &:dir(ltr) { padding-right: 8px; }
        &:dir(rtl) { padding-left: 8px; }
      }
  
      label.sidebar-label {
        &:dir(ltr) { padding-right: 2px; }
        &:dir(rtl) { padding-left: 2px; }
      }
  
      button.sidebar-button {
        @extend %simple_flat_button;
  
        @extend %small_button;
  
        // row:selected & { @extend %button_selected_flat; }
      }
  
      &.sidebar-placeholder-row {
        min-height: 2px;
        padding: 0 8px;
        background-image: image($accent_color);
        background-clip: content-box;
      }
  
      &.sidebar-new-bookmark-row {
        &, image.sidebar-icon {
          color: $accent_color;
        }
      }
  
      &:drop(active):not(:disabled) {
        box-shadow: inset 0 0 0 2px $accent_color;
      }
    }
  }
}

placesview {
  .server-list-button > image { -gtk-icon-transform: rotate(0turn); }

  .server-list-button:checked > image { -gtk-icon-transform: rotate(-0.5turn); }

  // this selects the "connect to server" label
  > actionbar > revealer > box > label {
    padding-left: 8px;
    padding-right: 8px;
  }
}


/*********
 * Paned *
 *********/
paned {
  > separator {
    min-width: 1px;
    min-height: 1px;
    -gtk-icon-source: none; // defeats the ugly default handle decoration
    border-style: none; // just to be sure
    background-color: transparent;
    // workaround, using background istead of a border since the border will get rendered twice (?)
    background-image: image($border_color);
    background-size: 1px 1px;
    background-clip: content-box; // avoids borders image being rendered twice (?)

    &.wide {
      min-width: 6px;
      min-height: 6px;
      background-color: $bg_color;
      background-image: image($border_color), image($border_color);
      background-size: 1px 1px, 1px 1px;
    }
  }

  &.horizontal > separator {
    background-repeat: repeat-y;

    &:dir(ltr) {
      margin: 0 -8px 0 0;
      padding: 0 8px 0 0;
      background-position: left;
    }

    &:dir(rtl) {
      margin: 0 0 0 -8px;
      padding: 0 0 0 8px;
      background-position: right;
    }

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-y, repeat-y;
      background-position: left, right;
    }
  }

  &.vertical > separator {
    margin: 0 0 -8px 0;
    padding: 0 0 8px 0;
    background-repeat: repeat-x;
    background-position: top;

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-x, repeat-x;
      background-position: bottom, top;
    }
  }
}


//
//  GtkVideo
//

video {
  & image.osd {
    min-width: 64px;
    min-height: 64px;
    border-radius: $circular_radius;
  }

  background: black;
}


/**************
 * GtkInfoBar *
 **************/
infobar {
  border-style: none;

  &.info { background-color: $info_bg_color; }

  &.question { background-color: $question_bg_color; }

  &.warning { background-color: $warning_bg_color; }

  &.error { background-color: $error_bg_color; }

  &.info,
  &.question,
  &.warning,
  &.error {
    > label, & { color: $inverse_fg_color; }

    button {
      @extend %flat_button;
      @extend %button_selected_flat;
    }

    *:link { @extend %link_selected; }
  }
}


/************
 * Tooltips *
 ************/
tooltip {
  &.background {
    // background-color needs to be set this way otherwise it gets drawn twice
    // see https://bugzilla.gnome.org/show_bug.cgi?id=736155 for details.
    border-radius: $menu_radius;
    background-color: rgba(black, 0.75);
    color: white;
    border: none;
  }

  padding: $container_padding;
  border-radius: $menu_radius;
  box-shadow: inset 0 1px rgba(white, 0.08);

  label {
    // tooltip label already seems to have 6px margins
    min-height: 20px;
    padding: 0 $container_padding / 2;
  }

  > box {
    border-spacing: $container_padding;
  }
}


/*****************
 * Color Chooser *
 *****************/
colorswatch {
  // This widget is made of two boxes one on top of the other, the lower box is colorswatch {} the other one
  // is colorswatch overlay {}, colorswatch has the programmatically set background, so most of the style is
  // applied to the overlay box.

  // base color corners rounding
  // to avoid the artifacts caused by rounded corner anti-aliasing the base color
  // sports a bigger radius.
  // nth-child is needed by the custom color strip.

  &.top {
    border-top-left-radius: $material_radius + 0.5px;
    border-top-right-radius: $material_radius + 0.5px;

    overlay {
      border-top-left-radius: $material_radius;
      border-top-right-radius: $material_radius;
    }
  }

  &.bottom {
    border-bottom-left-radius: $material_radius + 0.5px;
    border-bottom-right-radius: $material_radius + 0.5px;

    overlay {
      border-bottom-left-radius: $material_radius;
      border-bottom-right-radius: $material_radius;
    }
  }

  &.left,
  &:first-child:not(.top) {
    border-top-left-radius: $material_radius + 0.5px;
    border-bottom-left-radius: $material_radius + 0.5px;

    overlay {
      border-top-left-radius: $material_radius;
      border-bottom-left-radius: $material_radius;
    }
  }

  &.right,
  &:last-child:not(.bottom) {
    border-top-right-radius: $material_radius + 0.5px;
    border-bottom-right-radius: $material_radius + 0.5px;

    overlay {
      border-top-right-radius: $material_radius;
      border-bottom-right-radius: $material_radius;
    }
  }

  &.dark { color: $light_fg_color; }

  &.light { color: $dark_fg_color; }

  &:drop(active) {
    box-shadow: none;

    &.light overlay { box-shadow: $shadow_1, 0 0 0 2px $accent_color; }

    &.dark overlay { box-shadow: $shadow_1, 0 0 0 2px $accent_color; }
  }

  overlay {
    transition: $shadow_transition;
    box-shadow: $shadow_1;

    &:hover { box-shadow: $shadow_2; }
  }

  &#add-color-button {
    border-radius: $material_radius $material_radius 0 0;
    color: $light_fg_color;

    &:only-child { border-radius: $material_radius; }

    overlay {
      background-image: linear-gradient(to right,
                                        $error_bg_color 25%,
                                        $warning_bg_color 25%, $warning_bg_color 50%,
                                        $info_bg_color 50%, $info_bg_color 75%,
                                        $question_bg_color 75%);
    }
  }

  &:disabled {
    opacity: $disabled_opacity;

    overlay { box-shadow: none; }
  }

  &#editor-color-sample {
    border-radius: $material_radius + 0.5px;

    overlay { border-radius: $material_radius; }

    // overlay:hover { box-shadow: $shadow_1; }
  }
}

// colorscale popup
colorchooser .popover.osd {
  transition: $shadow_transition;
  border-radius: $buttons_radius;
  box-shadow: $shadow_2, inset 0 1px $highlight_color;
  background-color: $base_color;

  &:backdrop { box-shadow: $shadow_1, inset 0 1px $highlight_color; }

  spinbutton:not(.vertical) { @extend %flat_entry; }
}


/********
 * Misc *
 ********/
// content view (grid/list)
.content-view {
  background-color: $bg_color;

  > rubberband { @extend rubberband; }
}

.scale-popup {
  .osd & { @extend %osd; }
}


/**********************
 * Window Decorations *
 **********************/
window {
  border: none;

  &.csd {
    border-radius: $windows_radius;
    box-shadow: $shadow_4, 0 0 36px transparent;
    margin: 0;
    outline: none;
    transition: none;

    &:backdrop {
      box-shadow: $shadow_2, 0 0 36px transparent;
      transition: $shadow_transition;
    }

    &.maximized,
    &.fullscreen,
    &.tiled,
    &.tiled-top,
    &.tiled-right,
    &.tiled-bottom,
    &.tiled-left { border-radius: 0; }
  
    &.maximized,
    &.fullscreen { box-shadow: none; }
  }

  &.solid-csd {
    margin: 0;
    border: none;
    border-radius: 0;
    box-shadow: inset 0 1px $highlight_color;
    background-color: $titlebar_bg_color;
  }

  &.ssd {
    box-shadow: none;
  }
}

/*****************
 * Title buttons *
 *****************/

headerbar {
  windowcontrols {
    border-spacing: 6px;

    &:not(.empty) {
      padding: ($large_size - $container_padding * 2 - 16px) / 2 $container_padding * 2;

      &.start:dir(ltr),
      &.end:dir(rtl) {
        margin-right: $container_padding;
      }

      &.start:dir(rtl),
      &.end:dir(ltr) {
        margin-left: $container_padding;
      }
    }

    > button:not(.suggested-action):not(.destructive-action) {
      @extend %circular_button;

      > image {
        padding: 0;
        border: none;
        outline: none;
        box-shadow: none;
        background: none;
      }

      &.close, &.maximize, &.minimize { // -gtk-icon-source:
        min-width: 12px;
        min-height: 12px;
        padding: 0;
        margin: 0 2px;
        color: transparent;
        background-color: $titlebar_track_color;

        &, &:backdrop {
          &:hover {
            color: $titlebar_secondary_fg_color;
          }

          &:active, &:checked {
            color: $titlebar_fg_color;
          }
        }

        &:backdrop {
          color: transparent;
          background-color: $titlebar_divider_color;
        }
      }

      &.close { // Window Close button
        transition: background-size 0, background-image 0, $shadow_transition;

        &:hover {
          padding: 2px;
          margin: -2px 0;
          background-color: $red_400;
          color: $inverse_secondary_fg_color;
          box-shadow: $shadow_2;
        }

        &:active, &:checked {
          padding: 2px;
          margin: -2px 0;
          background-color: $accent_color;
          color: $inverse_fg_color;
          box-shadow: $shadow_1;
        }
      }
    }
  }
}

// catch all extend :)

%selected_items {
  background-color: $primary_color;
  color: $inverse_fg_color;

  &:disabled { color: $inverse_disabled_fg_color; }
}

.monospace { font-family: monospace; }


/**********************
 * Touch Copy & Paste *
 **********************/
// touch selection handlebars for the Popover.osd above
cursor-handle {
  border-radius: $circular_radius;
  background-color: $accent_color;
  background-image: none;

  &.top:dir(ltr), &.bottom:dir(rtl) {
    padding-left: 6px;
    border-top-right-radius: 0;
  }

  &.bottom:dir(ltr), &.top:dir(rtl) {
    padding-right: 6px;
    border-top-left-radius: 0;
  }

  &.insertion-cursor:dir(ltr), &.insertion-cursor:dir(rtl) {
    $_url: 'assets/scale-horz-marks-before-slider#{$asset_suffix}';
    -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                  url('#{$_url}@2.png'));
  }
}

shortcuts-section {
  margin: 20px;
}

.shortcuts-search-results {
  margin: 20px;
  border-spacing: 24px;
}

.context-menu { font: initial; } // Decouple the font of context menus from their entry/textview

// shortcut window keys
shortcut > .keycap {
  min-width: 28px - 8px * 2;
  min-height: 28px - 2px;
  margin-top: 2px;
  padding-bottom: 2px;
  padding-left: 8px;
  padding-right: 8px;

  border: solid 1px $border_color;
  border-radius: $material_radius;
  box-shadow: inset 0 -2px $border_color;
  background-color: $base_color;
  color: $fg_color;
  font-size: smaller;
}

:not(decoration):not(window):drop(active) { // FIXME needs to be done widget by widget, this wildcard should really die
  transition: $longer_transition;
  box-shadow: $shadow_1, inset 0 0 0 2px $accent_color;
  caret-color: $accent_color;
}

stackswitcher button.text-button { min-width: 100px; } // FIXME aggregate with buttons

stackswitcher button.circular,
stackswitcher button.text-button.circular { // FIXME aggregate with buttons
  min-width: $medium_size;
  min-height: $medium_size;
  padding: 0;
}

//
// App Icons
//
.lowres-icon {
    -gtk-icon-shadow: 0 -1px rgba(0,0,0,0.05),
      1px 0 rgba(0,0,0,0.1),
      0 1px rgba(0,0,0,0.3),
      -1px 0 rgba(0,0,0,0.1);
}

.icon-dropshadow {
  -gtk-icon-shadow: 0 1px 12px rgba(0,0,0,0.05),
      0 -1px rgba(0,0,0,0.05),
      1px 0 rgba(0,0,0,0.1),
      0 1px rgba(0,0,0,0.3),
      -1px 0 rgba(0,0,0,0.1);
}


/*********
 * Emoji *
 *********/
popover.emoji-picker {
  > contents {
    padding: 0;
  }
}

.emoji-searchbar {
  padding: $container_padding;
  border-spacing: $container_padding;
  border-bottom: 1px solid $border_color;
}

.emoji-toolbar {
  padding: $container_padding;
  border-spacing: $container_padding;
  border-top: 1px solid $border_color;
}


// mimic tab style
button.emoji-section {
  margin-top: -1px;
  padding: 0 8px;
  min-width: 24px;
  min-height: $medium_size;
  border-radius: 0;
  box-shadow: none;

  &:hover { box-shadow: inset 0 2px $track_color; }

  &:active {
    box-shadow: inset 0 2px $primary_color;
  }

  &:checked {
    box-shadow: inset 0 2px $primary_color;
    background-color: transparent;
  }

  &:first-child { margin-left: 4px; }
  &:last-child { margin-right: 4px; }
}

popover.emoji-picker emoji {
  font-size: x-large;
  padding: $container_padding;
  border-radius: $container_padding;

  &:focus,
  &:hover {
    background: $primary_color;
  }
}

emoji-completion-row > box {
  border-spacing: $container_padding;
  padding: 2px $container_padding;
}

emoji-completion-row:focus,
emoji-completion-row:hover {
  @extend %selected_items;
}

emoji-completion-row emoji:focus,
emoji-completion-row emoji:hover {
  background: none;
  box-shadow: inset 0 0 0 2px rgba($fg_color, 0.05);
  border-radius: 3px;
}

popover.entry-completion > contents {
  padding: 0;
}

statusbar {
  padding: $container_padding ($container_padding + 4px);
}
